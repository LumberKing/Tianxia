# This file needs a LOT of updates down the line, but for starters it is just being updated to make sense with China on the map and to include the EoC where necessary
# We want to the EoC and various people in China to be involved in various ways
# We want to expand stuff to allow for friendships, rivalries, etc.
# We want to ensure that everything makes sense without an offmap China

## Event chain for Chinese Kow Tow ###

namespace = JD

character_event = {	#I begin my journey...
	id = JD.32000
	desc = EVTDESC_JD_32000
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
	
	picture = GFX_evt_china_open
    border = GFX_event_normal_frame_diplomacy
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA_JD_32000
		add_trait = kow_tow_travels
		
		hidden_tooltip = {
			character_event = { id = JD.32001 }
		}
	}
}

character_event = { #Hidden set-up event!
	id = JD.32001
	has_dlc = "Jade Dragon"
	hide_window = yes


	trigger = {
		trait = kow_tow_travels
	}
	
	is_triggered_only = yes
	
	immediate = {
		# Take distance into account for delay
		# 1513 = Jiuquan on the Eastern border
		capital_scope = {
			if = { # Near the far east
				limit = {
					distance = {
						where = 1513
						value < 500
					}
				}
				ROOT = {
					set_variable = {
						which = china_kow_tow_travel_events
						value = 1
					}
				}
			}
			else_if = { # Still on the eastern side of the map
				limit = {
					distance = {
						where = 2876 # Luoyang, de jure capital of e_china
						value < 900
					}
				}
				ROOT = {
					set_variable = {
						which = china_kow_tow_travel_events
						value = 2
					}
				}
			}
			else_if = { # Approaching the Middle East
				limit = {
					distance = {
						where = 2876 # Luoyang, de jure capital of e_china
						value < 1500
					}
				}
				ROOT = {
					set_variable = {
						which = china_kow_tow_travel_events
						value = 3
					}
				}
			}
			else = { # In or around the Middle East and beyond
				ROOT = {
					set_variable = {
						which = china_kow_tow_travel_events
						value = 4
					}
				}
			}
		}
		character_event = {
			id = JD.32005 # random travel event tombola
			days = 110
			random = 30
		}
	}
}

character_event = { # Travel Tombola
	id = JD.32005
	has_dlc = "Jade Dragon"
	hide_window = yes

	trigger = {
		trait = kow_tow_travels
	}
	
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = {
				NOT = {
					check_variable = {
						which = china_kow_tow_travel_events
						value = 1
					}
				}
			} 
			### No more travel events - Move on to entering China
			character_event = { id = JD.32200 days = 50 random = 30 }
			break = yes
		}
		
		# Fire a random travel event
		random_list = {
			50 = { # Unusually heavy rain, think of late parents.
				trigger = {
					NOT = { has_character_flag = kow_tow_heavy_rain }
					OR = {
						father_even_if_dead = {
							NOT = { is_alive = yes }
							#death_in_china_trigger = no # This trigger is for vanilla's "Was sent to China" "deaths" and thus commented out
						}
						mother_even_if_dead = {
							NOT = { is_alive = yes }
							#death_in_china_trigger = no # This trigger is for vanilla's "Was sent to China" "deaths" and thus commented out
						}
						any_sibling_even_if_dead = {
							NOT = { is_alive = yes }
							#death_in_china_trigger = no # This trigger is for vanilla's "Was sent to China" "deaths" and thus commented out
						}
					}
				}
				character_event = {
					id = JD.32100
				}
				break = yes
			}
			50 = {
				character_event = { id = JD.15010 }  # Homesick (I really miss <person>)
				trigger = {
					NOT = { has_character_flag = missed_loved_one }
					any_courtier_or_vassal = {
						OR = {
							is_lover = ROOT
							any_spouse = { character = ROOT }
							AND = {
								OR = {
									is_mother = ROOT
									is_father = ROOT
								}
								NOR = {
									is_lover = ROOT
									any_spouse = { character = ROOT }
								}
							}
							AND = {
								is_child_of = ROOT
								NOR = {
									is_lover = ROOT
									any_spouse = { character = ROOT }
								}
							}
							AND = {
								is_friend = ROOT
								NOR = {
									is_lover = ROOT
									any_spouse = { character = ROOT }
									is_mother = ROOT
									is_father = ROOT
									is_child_of = ROOT
								}
							}
						}
					}
				}
				break = yes
			}
			#50 = {
			#	character_event = { id = JD.15017 }  # Meet traveling merchant
			#	trigger = {
			#		NOT = { has_character_flag = met_traveling_merchant }
			#		NOT = {
			#			any_artifact = {
			#				count = 15
			#				has_artifact_flag = chinese
			#			}
			#		}
			#	}
			#	break = yes
			#}
			50 = { # Messenger invites you to the Lords keep, travel time > 1
				trigger = {
					NOT = { has_character_flag = kow_tow_invited_by_local_lord }
					OR = {
						AND = {
							NOT = {
								check_variable = {
									which = china_kow_tow_travel_events
									value = 2
								}
							}
							capital_scope = {
								distance = {
									where = 1513
									value >= 900
								}
							}
						}
						AND = {
							NOT = {
								check_variable = {
									which = china_kow_tow_travel_events
									value = 3
								}
							}
							capital_scope = {
								distance = {
									where = 1513
									value >= 1500
								}
							}
						}
					}
					any_playable_ruler = {
						#ai = yes
						OR = {
							tier = COUNT
							tier = DUKE
						}
						ROOT = {
							NOT = {
								capital_scope = {
									region = world_china
								}
							}
						}
						# Find someone that hopefully is on the way, but allow for some sightseeing/detours
						OR = {
							# ROOT lives near China
							AND = {
								ROOT = {
									capital_scope = {
										OR = {
											region = world_steppe_tarim
											region = world_manchuria
											region = world_mongolia
											region = world_korea
											region = world_japan
											region = world_steppe_east
											region = world_tibet
											region = world_philippines
											region = world_vietnam
											region = world_taiwan
											region = custom_yezo
											region = world_japan_islands
										}
									}
								}
								capital_scope = {
									region = world_china
								}
							}
							# ROOT lives in the north, but somewhat near
							AND = {
								ROOT = {
									capital_scope = {
										OR = {
											region = world_steppe_west
										}
									}
								}
								capital_scope = {
									OR = {
										region = world_china
										region = world_steppe_east
										region = world_mongolia
									}
								}
							}
							# ROOT lives in Eastern Europe
							AND = {
								ROOT = {
									capital_scope = {
										region = world_europe_east
									}
								}
								capital_scope = {
									OR = {
										region = world_china
										region = world_steppe_east
										region = world_steppe_west
										region = world_mongolia
									}
								}
							}
							# ROOT lives in Northern Europe
							AND = {
								ROOT = {
									capital_scope = {
										region = world_europe_north
									}
								}
								capital_scope = {
									OR = {
										region = world_europe_east
										region = world_china
										region = world_steppe_east
										region = world_steppe_west
										region = world_mongolia
									}
								}
							}
							# ROOT lives in Persia
							AND = {
								ROOT = {
									capital_scope = {
										region = world_persia
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
									}
								}
							}
							# ROOT lives in Asia Minor
							AND = {
								ROOT = {
									capital_scope = {
										region = world_asia_minor
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
										region = world_persia
										region = world_middle_east
									}
								}
							}
							# ROOT lives in Southern Europe
							AND = {
								ROOT = {
									capital_scope = {
										region = world_europe_south
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
										region = world_persia
										region = world_asia_minor
										region = world_middle_east
									}
								}
							}
							# ROOT lives in Western Europe
							AND = {
								ROOT = {
									capital_scope = {
										region = world_europe_west
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
										region = world_persia
										region = world_asia_minor
										region = world_middle_east
										region = world_europe_south
									}
								}
							}
							# ROOT lives in North Africa
							AND = {
								ROOT = {
									capital_scope = {
										region = world_africa_north
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
										region = world_persia
										region = world_middle_east
									}
								}
							}
							# ROOT lives in West Africa
							AND = {
								ROOT = {
									capital_scope = {
										region = world_africa_west
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
										region = world_persia
										region = world_middle_east
										region = world_africa_north
									}
								}
							}
							# ROOT lives in Central Africa
							AND = {
								ROOT = {
									capital_scope = {
										region = world_africa_central
									}
								}
								capital_scope = {
									OR = {
										region = world_africa_north
										region = world_persia
										region = world_china
										region = world_indochina
										region = world_indonesia
										region = world_tibet
										region = world_middle_east
										region = world_india_bengal
										region = world_india_rajastan
										region = world_india_deccan
									}
								}
							}
							# ROOT a short distance to the south
							AND = {
								ROOT = {
									capital_scope = {
										OR = {
											region = world_burma
											region = world_khmer
										}
										NOT = {
											region = world_china
										}
									}
								}
								capital_scope = {
									OR = {
										region = world_vietnam
										region = world_china
									}
								}
							}
							# ROOT lives in Indonesia
							AND = {
								ROOT = {
									capital_scope = {
										region = world_indonesia
									}
								}
								capital_scope = {
									OR = {
										region = world_vietnam
										region = world_china
										region = world_burma
										region = world_khmer
									}
								}
							}
							# ROOT lives in Bengal
							AND = {
								ROOT = {
									capital_scope = {
										region = world_india_bengal
									}
								}
								capital_scope = {
									OR = {
										region = world_china
										region = world_indochina
										region = world_indonesia
										region = world_tibet
									}
								}
							}
							# ROOT lives in Rajastan or Deccan
							AND = {
								ROOT = {
									capital_scope = {
										OR = {
											region = world_india_rajastan
											region = world_india_deccan
										}
									}
								}
								capital_scope = {
									OR = {
										region = world_china
										region = world_indochina
										region = world_indonesia
										region = world_tibet
										region = world_india_bengal
									}
								}
							}
							# ROOT lives in the Middle East
							AND = {
								ROOT = {
									capital_scope = {
										region = world_middle_east
									}
								}
								capital_scope = {
									OR = {
										region = world_persia
										region = world_china
										region = world_indochina
										region = world_indonesia
										region = world_tibet
										region = world_india_bengal
										region = world_india_rajastan
										region = world_india_deccan
									}
								}
							}
							# ROOT lives in East Africa
							AND = {
								ROOT = {
									capital_scope = {
										region = world_africa_east
									}
								}
								capital_scope = {
									OR = {
										region = world_persia
										region = world_china
										region = world_indochina
										region = world_indonesia
										region = world_tibet
										region = world_middle_east
										region = world_india_bengal
										region = world_india_rajastan
										region = world_india_deccan
									}
								}
							}
						}
						NOT = {
							num_of_friends = 3
						}
						NOT = { block_general_event_trigger = yes }
					}
				}
				random_playable_ruler = {
					limit = {
						#ai = yes
						OR = {
							tier = COUNT
							tier = DUKE
						}
						ROOT = {
							NOT = {
								capital_scope = {
									region = world_china
								}
							}
						}
						# Find someone that hopefully is on the way, but allow for some sightseeing/detours
						OR = {
							# ROOT lives near China
							AND = {
								ROOT = {
									capital_scope = {
										OR = {
											region = world_manchuria
											region = world_mongolia
											region = world_korea
											region = world_japan
											region = world_steppe_east
											region = world_tibet
											region = world_philippines
											region = world_vietnam
										}
									}
								}
								capital_scope = {
									region = world_china
								}
							}
							# ROOT lives in the north, but somewhat near
							AND = {
								ROOT = {
									capital_scope = {
										OR = {
											region = world_steppe_west
										}
									}
								}
								capital_scope = {
									OR = {
										region = world_china
										region = world_steppe_east
										region = world_mongolia
									}
								}
							}
							# ROOT lives in Eastern Europe
							AND = {
								ROOT = {
									capital_scope = {
										region = world_europe_east
									}
								}
								capital_scope = {
									OR = {
										region = world_china
										region = world_steppe_east
										region = world_steppe_west
										region = world_mongolia
									}
								}
							}
							# ROOT lives in Northern Europe
							AND = {
								ROOT = {
									capital_scope = {
										region = world_europe_north
									}
								}
								capital_scope = {
									OR = {
										region = world_europe_east
										region = world_china
										region = world_steppe_east
										region = world_steppe_west
										region = world_mongolia
									}
								}
							}
							# ROOT lives in Persia
							AND = {
								ROOT = {
									capital_scope = {
										region = world_persia
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
									}
								}
							}
							# ROOT lives in Asia Minor
							AND = {
								ROOT = {
									capital_scope = {
										region = world_asia_minor
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
										region = world_persia
										region = world_middle_east
									}
								}
							}
							# ROOT lives in Southern Europe
							AND = {
								ROOT = {
									capital_scope = {
										region = world_europe_south
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
										region = world_persia
										region = world_asia_minor
										region = world_middle_east
									}
								}
							}
							# ROOT lives in Western Europe
							AND = {
								ROOT = {
									capital_scope = {
										region = world_europe_west
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
										region = world_persia
										region = world_asia_minor
										region = world_middle_east
										region = world_europe_south
									}
								}
							}
							# ROOT lives in North Africa
							AND = {
								ROOT = {
									capital_scope = {
										region = world_africa_north
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
										region = world_persia
										region = world_middle_east
									}
								}
							}
							# ROOT lives in West Africa
							AND = {
								ROOT = {
									capital_scope = {
										region = world_africa_west
									}
								}
								capital_scope = {
									OR = {
										region = world_steppe_tarim
										region = world_china
										region = world_tibet
										region = world_persia
										region = world_middle_east
										region = world_africa_north
									}
								}
							}
							# ROOT lives in Central Africa
							AND = {
								ROOT = {
									capital_scope = {
										region = world_africa_central
									}
								}
								capital_scope = {
									OR = {
										region = world_africa_north
										region = world_persia
										region = world_china
										region = world_indochina
										region = world_indonesia
										region = world_tibet
										region = world_middle_east
										region = world_india_bengal
										region = world_india_rajastan
										region = world_india_deccan
									}
								}
							}
							# ROOT a short distance to the south
							AND = {
								ROOT = {
									capital_scope = {
										OR = {
											region = world_burma
											region = world_khmer
										}
										NOT = {
											region = world_china
										}
									}
								}
								capital_scope = {
									OR = {
										region = world_vietnam
										region = world_china
									}
								}
							}
							# ROOT lives in Indonesia
							AND = {
								ROOT = {
									capital_scope = {
										region = world_indonesia
									}
								}
								capital_scope = {
									OR = {
										region = world_vietnam
										region = world_china
										region = world_burma
										region = world_khmer
									}
								}
							}
							# ROOT lives in Bengal
							AND = {
								ROOT = {
									capital_scope = {
										region = world_india_bengal
									}
								}
								capital_scope = {
									OR = {
										region = world_china
										region = world_indochina
										region = world_indonesia
										region = world_tibet
									}
								}
							}
							# ROOT lives in Rajastan or Deccan
							AND = {
								ROOT = {
									capital_scope = {
										OR = {
											region = world_india_rajastan
											region = world_india_deccan
										}
									}
								}
								capital_scope = {
									OR = {
										region = world_china
										region = world_indochina
										region = world_indonesia
										region = world_tibet
										region = world_india_bengal
									}
								}
							}
							# ROOT lives in the Middle East
							AND = {
								ROOT = {
									capital_scope = {
										region = world_middle_east
									}
								}
								capital_scope = {
									OR = {
										region = world_persia
										region = world_china
										region = world_indochina
										region = world_indonesia
										region = world_tibet
										region = world_india_bengal
										region = world_india_rajastan
										region = world_india_deccan
									}
								}
							}
							# ROOT lives in East Africa
							AND = {
								ROOT = {
									capital_scope = {
										region = world_africa_east
									}
								}
								capital_scope = {
									OR = {
										region = world_persia
										region = world_china
										region = world_indochina
										region = world_indonesia
										region = world_tibet
										region = world_middle_east
										region = world_india_bengal
										region = world_india_rajastan
										region = world_india_deccan
									}
								}
							}
						}
						NOT = {
							num_of_friends = 3
						}
						NOT = { block_general_event_trigger = yes }
					}
					character_event = { id = kowtow.1 } # The possible host can invite ROOT
				}
				break = yes
			}
			#50 = {
			#	character_event = { id = JD.15000 }  # Mercenary encounter (1/3)
			#	trigger = {
			#		NOT = { has_character_flag = met_mercenaries }
			#		 any_independent_ruler = {
		    #            ai = yes
		    #            mercenary = yes
			#			culture_group = chinese_group
			#			primary_title = {
			#				NOT = { has_raised_standing_troops = yes }
			#			}
		    #        }
			#	}
			#	break = yes
			#}
		}
		
		### No more possible travel events - Continue to China anyway with extra delay
		character_event = { id = JD.32200 days = 150 random = 60 }
	}
}

character_event = {  # Unusually heavy rain, think of late parents.
	id = JD.32100
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
	
	desc = EVTDESC_JD_32100
	picture = GFX_evt_carriage_default
    border = GFX_event_normal_frame_diplomacy

	trigger = {
		trait = kow_tow_travels
	}
	
	hide_from = yes
	
	is_triggered_only = yes
	
	immediate = {
		hidden_effect = {
			set_character_flag = kow_tow_heavy_rain
			random_list = {
				50 = {
					trigger = {
						father_even_if_dead = {
							NOT = { is_alive = yes }
							#death_in_china_trigger = no  # This trigger is for vanilla's "Was sent to China" "deaths" and thus commented out
						}
					}
					father_even_if_dead = {
						save_event_target_as = target_relative
					}
				}
				50 = {
					trigger = {
						mother_even_if_dead = {
							NOT = { is_alive = yes }
							#death_in_china_trigger = no  # This trigger is for vanilla's "Was sent to China" "deaths" and thus commented out
						}
					}
					mother_even_if_dead = {
						save_event_target_as = target_relative
					}
				}
				50 = {
					trigger = {
						any_sibling_even_if_dead = {
							NOT = { is_alive = yes }
							#death_in_china_trigger = no  # This trigger is for vanilla's "Was sent to China" "deaths" and thus commented out
						}
					}
					random_sibling_even_if_dead = {
						limit = {
							NOT = { is_alive = yes }
							#death_in_china_trigger = no  # This trigger is for vanilla's "Was sent to China" "deaths" and thus commented out
						}
						save_event_target_as = target_relative
					}
				}
			}
		}
	}
	
	option = {
		# <Name> was such a X person
		name = {
			text = EVTOPTA_JD_32100_young
			trigger = {
				event_target:target_relative = {	
					NOT = { is_adult = yes }
				}
			}
		}
		name = {
			text = EVTOPTA_JD_32100_pious
			trigger = {
				event_target:target_relative = {
					is_pious_trigger = yes
				}
			}
		}
		name = {
			text = EVTOPTA_JD_32100_genius
			trigger = {
				event_target:target_relative = {
					trait = genius
				}
			}
		}
		name = {
			text = EVTOPTA_JD_32100_mystic
			trigger = {
				event_target:target_relative = {
					trait = mystic
				}
			}
		}
		name = {
			text = EVTOPTA_JD_32100_brave
			trigger = {
				event_target:target_relative = {
					OR = {
						trait = brave
						AND = {
							NOT = { trait = craven }
							OR = {
								trait = holy_warrior
								trait = unyielding_leader
								trait = inspiring_leader
								trait = experimenter
							}
						}
					}
				}
			}
		}
		name = {
			text = EVTOPTA_JD_32100_charming
			trigger = {
				event_target:target_relative = {
					is_attractive_trigger = yes
				}
			}
		}
		name = {
			text = EVTOPTA_JD_32100_just
			trigger = {
				event_target:target_relative = {
					trait = just
				}
			}
		}
		name = {
			text = EVTOPTA_JD_32100_kind
			trigger = {
				event_target:target_relative = {
					has_benevolent_trait_trigger = yes
				}
			}
		}
		name = {
			text = EVTOPTA_JD_32100_cruel
			trigger = {
				event_target:target_relative = {
					OR = {
						trait = cruel
						trait = impaler
						trait = greedy
						trait = wroth
						trait = deceitful
						trait = lunatic
						trait = possessed
					}
				}
			}
		}
		name = {
			text = EVTOPTA_JD_32100_learned
			trigger = {
				event_target:target_relative = {
					is_learned_trigger = yes
				}
			}
		}
		name = {
			text = EVTOPTA_JD_32100_good ### Fallback
			trigger = {
				always = yes
			}
		}
		event_target:target_relative = {
			show_portrait = yes
		}
		#show_portrait = event_target:target_relative
		###
		custom_tooltip = {
			text = EVTTOOLTIPA_JD_32100
		}
		add_character_modifier = {
			name = honoring_the_dead
			years = 5
		}
	}
	
	option = {
		name = EVTOPTB_JD_32100 # I need to focus on the journey
		
		add_character_modifier = {
			name = carrying_on
			years = 2
		}
	}
	
	after = {
		return_to_travel_tombola_effect = yes
	}
}

# This sub-chain has been changed quite a bit from vanilla since the other party can be a player; assume all changes are intentional!
character_event = { # Messenger invites you to the Lords keep, travel time > 2
	id = JD.32110
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
	
	desc = EVTDESC_JD_32110
	picture = GFX_evt_courier
    border = GFX_event_normal_frame_diplomacy

	
	trigger = {
		trait = kow_tow_travels
	}
	
	is_triggered_only = yes
	
	portrait = event_target:target_host
	
	immediate = {
		set_character_flag = kow_tow_invited_by_local_lord
		FROM = {
			save_event_target_as = target_host
		}
	}
	option = { # An opportunity to get even
		name = EVTOPTA_JD_32110
		tooltip_info = schemer
		
		trigger = {
			trait = schemer
			event_target:target_host = {
				is_rival = ROOT
			}
		}
		custom_tooltip = {
			text = EVTTTOOLTIPA_JD_32110
		}
		
		opinion = {
			who = FROM
			modifier = opinion_kowtow_murder_target
		}
		
		FROM = {
			character_event = { id = kowtow.2 } # See who makes the attempt first
		}
		
		#narrative_event = {
		#	id = JD.32113
		#	days = 7
		#	random = 4
		#}
	}
	
	option = { # I'll accept the invitation
		name = {
			text = EVTOPTB_JD_32110
			trigger = {
				NOT = {
					event_target:target_host = {
						is_rival = ROOT
					}
				}
			}
		}
		name = {
			text = EVTOPTB_JD_32110_RIVAL
			trigger = {
				event_target:target_host = {
					is_rival = ROOT
				}
			}
		}
		
		custom_tooltip = {
			text = EVTTTOOLTIPB_JD_32110
		}
		if = {
			limit = {
				reverse_has_opinion_modifier = {
					who = FROM
					modifier = opinion_kowtow_murder_target
				}
			}
			FROM = {
				character_event = { id = kowtow.2 } # FROM attempts to murder ROOT
			}
			break = yes
		}
		character_event = {
			id = JD.32111
			days = 7
			random = 4
		}
	}
	
	option = { # My tent does fine
		name = EVTOPTC_JD_32110
		
		random_list = {
			25 = {
				add_trait = content
			}
			25 = {
				add_trait = shy
			}
			50 = {
				# Nothing happens
			}
		}
		
		FROM = {
			character_event = { id = kowtow.16 } # Inform host that guest refused to come
		}
		
		hidden_effect = { # End of path
			return_to_travel_tombola_effect = yes
		}
	}
}

character_event = { #Follow up from accepting the invitation
	id = JD.32111
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
	
	desc = { # Normal outcome
		text = EVTDESCA_JD_32111
		trigger = {
			NOR = {
				has_character_flag = possible_friendship
				has_character_flag = possible_murder
			}
		}
	}
	desc = { # Friendship outcome
		text = EVTDESCB_JD_32111
		trigger = {
			has_character_flag = possible_friendship
		}
	}
	desc = { # Murder attempt outcome
		text = EVTDESCC_JD_32111
		trigger = {
			has_character_flag = possible_murder
		}
	}
	picture = GFX_evt_feast
    border = GFX_event_normal_frame_diplomacy
	
	portrait = event_target:target_host
	
	is_triggered_only = yes


	trigger = {
		trait = kow_tow_travels
	}
	
	immediate = {
		hidden_effect = {
			random_list = {
				50 = { # Friendship outcome
					trigger = {
						NOT = {
							event_target:target_host = {
								OR = {
									is_friend = ROOT
									is_rival = ROOT
									has_opinion_modifier = {
										modifier = opinion_kowtow_murder_target
										who = ROOT
									}
								}
							}
						}
					}
					set_character_flag = possible_friendship
				}
				#25 = { # Murder attempt outcome
				#	trigger = {
				#		event_target:target_host = {
				#			is_rival = ROOT
				#		}						
				#	}
				#	modifier = {
				#		factor = 8
				#		event_target:target_host = {
				#			trait = deceitful
				#		}
				#	}
				#	set_character_flag = possible_murder
				#}
				50 = {} # Normal outcome
			}
		}
	}
	
	option = {
		name = EVTOPTA_JD_32111 # Normal outcome
		
		trigger = {
			NOR = {
				has_character_flag = possible_friendship
				has_character_flag = possible_murder
			}
		}
		
		add_character_modifier = {
			modifier = good_nights_sleep
			months = 12
		}
		
		event_target:target_host = {
			character_event = { id = kowtow.7 } # Inform the host
		}
		
		if = {
			limit = {
				is_rival = event_target:target_host
			}
			remove_rival = event_target:target_host
		}
	}
	
	option = {
		name = EVTOPTB_JD_32111 # Friendship outcome
		
		trigger = {
			has_character_flag = possible_friendship
		}
		
		add_character_modifier = {
			modifier = good_nights_sleep
			months = 5
		}
		add_friend = event_target:target_host
		
		event_target:target_host = {
			character_event = { id = kowtow.6 } # Inform the host
		}
	}
	
	option = {
		name = EVTOPTC_JD_32111 # Friendship deny
		
		trigger = {
			has_character_flag = possible_friendship
		}
		
		add_character_modifier = {
			modifier = good_nights_sleep
			months = 5
		}
	}
	
#	option = { # Handled elsewhere!
#		name = EVTOPTD_JD_32111
#		
#		trigger = {
#			has_character_flag = possible_murder
#		}
#		
#		random_list = {
#			50 = {
#				death = {
#					death_reason = death_murder_poison
#					killer = event_target:target_host
#				}
#				if = {
#					limit = {
#						has_dlc = "Jade Dragon"
#						# event_target:target_host cannot be the EoC
#					}
#					# ROOT cannot be the EoC
#					if = {
#						limit = {
#							is_chinese_emperor_trigger = no
#							any_close_relative = {
#								dynasty = ROOT
#								is_chinese_emperor_trigger = yes
#							}
#						}
#						event_target:target_host = {
#							detract_grace_massive_effect = yes
#						}
#					}
#					else_if = {
#						limit = {
#							any_dynasty_member = {
#								is_chinese_emperor_trigger = yes
#							}
#						}
#						event_target:target_host = {
#							detract_grace_major_effect = yes
#						}
#					}
#				}
#			}
#			50 = {
#				custom_tooltip = {
#					text = EVTTOOLTIPD_JD_32111
#				}
#				character_event = { id = JD.32112 }
#			}
#		}
#	}
	
	after = {
		clr_character_flag = possible_murder
		clr_character_flag = possible_friendship
		return_to_travel_tombola_effect = yes
	}
}

#character_event = { #Follow up from option D
#	id = JD.32112
#	has_dlc = "Jade Dragon"
#	
#	title = EVTTITLE_JD_KOWTOW
#	
#	desc = EVTDESC_JD_32112
#	picture = GFX_evt_drunk
#    border = GFX_event_normal_frame_diplomacy
#	
#	portrait = event_target:target_host
#	
#	is_triggered_only = yes
#
#
#	trigger = {
#		trait = kow_tow_travels
#	}
#	
#	option = {
#		name = EVTOPTA_JD_32112
#		if = {
#			limit = {
#				has_dlc = "Reapers"
#			}
#			give_food_poisoning_effect = yes
#			custom_tooltip = { text = EVTTTOOLTIPA_JD_32112 }
#		}
#		else = {
#			add_character_modifier = {
#				modifier = poisoned
#				months = 6
#			}
#		}
#	}
#}

narrative_event = { #Follow up from option A
	id = JD.32113
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_32113
	desc = {
		text = EVTDESCA_JD_32113
		trigger = {
			has_character_flag = successful_murder
		}
	}
	desc = {
		text = EVTDESCB_JD_32113
		trigger = {
			has_character_flag = successful_murder_but_caught
		}
	}
	desc = {
		text = EVTDESCC_JD_32113
		trigger = {
			NOR = { 
				has_character_flag = successful_murder
				has_character_flag = successful_murder_but_caught
			}
		}
	}
	picture = GFX_evt_feast # Should be here, even though it isn't in vanilla!
    border = GFX_event_narrative_frame_intrigue
	
	portrait = event_target:target_host


	trigger = {
		trait = kow_tow_travels
	}
	
	is_triggered_only = yes
	
	immediate = {
		random_list = {
			15 = { # Target dies while you slip away in the shadows
				modifier = {
					factor = 3
					intrigue = 18
				}
				modifier = {
					factor = 2
					trait = elusive_shadow
				}
				
				set_character_flag = successful_murder
				event_target:target_host = {
					set_character_flag = got_murdered
				}
			}
			30 = { # Target dies, guards kill you
				set_character_flag = successful_murder_but_caught
				event_target:target_host = {
					set_character_flag = got_murdered_murderer_got_caught
				}
			}
			30 = { # Target survives, guards kill you
				modifier = {
					factor = 0.6
					intrigue = 16
				}
				modifier = {
					factor = 0.5
					event_target:target_host = {
						trait = trusting
					}
				}
				modifier = {
					factor = 3
					event_target:target_host = {
						intrigue = 14
					}
				}
				modifier = {
					factor = 1.5
					event_target:target_host = {
						trait = paranoid
					}
				}
				event_target:target_host = {
					set_character_flag = no_murder_attacker_caught
				}
			}
		}
		event_target:target_host = {
			narrative_event = { id = kowtow.5 }
		}
	}
	
	option = {
		name = EVTOPTA_JD_32113
		trigger = {
			has_character_flag = successful_murder
		}
		if = {
			limit = {
				has_dlc = "Jade Dragon"
				# ROOT cannot be the EOC
			}
			# event_target:target_host cannot be the EoC
			if = {
				limit = {
					event_target:target_host = {
						is_chinese_emperor_trigger = no
						any_close_relative = {
							dynasty = PREV
							is_chinese_emperor_trigger = yes
						}
					}
				}
				detract_grace_massive_effect = yes
			}
		}
		event_target:target_host = {
			death = {
				death_reason = death_murder_poison
				killer = ROOT
			}
		}
		change_intrigue = 1
		
		return_to_travel_tombola_effect = yes
	}
	option = {
		name = EVTOPTB_JD_32113
		trigger = {
			has_character_flag = successful_murder_but_caught
		}
		if = {
			limit = {
				has_dlc = "Jade Dragon"
				# ROOT cannot be the EOC
			}
			# event_target:target_host cannot be the EoC
			if = {
				limit = {
					event_target:target_host = {
						is_chinese_emperor_trigger = no
						any_close_relative = {
							dynasty = PREV
							is_chinese_emperor_trigger = yes
						}
					}
				}
				detract_grace_massive_effect = yes
			}
		}
		event_target:target_host = {
			death = {
				death_reason = death_murder_poison
				killer = ROOT
			}
		}
		death = {
			death_reason = death_murder
			killer = event_target:target_host
		}
	}
	option = {
		name = EVTOPTC_JD_32113
		trigger = {
			NOR = {
				has_character_flag = successful_murder
				has_character_flag = successful_murder_but_caught
			}
		}
		if = {
			limit = {
				has_dlc = "Jade Dragon"
				# ROOT cannot be the EOC
			}
			# event_target:target_host cannot be the EoC
			if = {
				limit = {
					event_target:target_host = {
						is_chinese_emperor_trigger = no
						any_close_relative = {
							dynasty = PREV
							is_chinese_emperor_trigger = yes
						}
					}
				}
				detract_grace_massive_effect = yes
			}
		}
		# The host is penalized in another event
		death = {
			death_reason = death_murder
			killer = event_target:target_host
		}
	}
	
	after = {
		clr_character_flag = successful_murder
		clr_character_flag = successful_murder_but_caught
	}
}

character_event = { # Enter China, choose path
	id = JD.32200
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
	desc = EVTDESC_JD_32200
	
	picture = GFX_evt_china_open
    border = GFX_event_normal_frame_diplomacy
	
	is_triggered_only = yes
	
	trigger = {
		trait = kow_tow_travels
	}
	
	immediate = {
		
	}
	
	option = { # Kow Tow before the Emperor
		name = EVTOPTA_JD_32200
		# Actually Kow Tow
		custom_tooltip = {
			text = EVTTOOLTIPA_JD_32200
			#set_character_flag = kow_tow_actually
		}
	}
	
	after = {
		hidden_tooltip = {
			set_variable = {
				which = china_kow_tow_travel_events
				value = 2
			}
			character_event = {
				id = JD.32210
				days = 40
				random = 25
			}
		}
	}
}

character_event = { # Within China Tombola
	id = JD.32210
	has_dlc = "Jade Dragon"
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		trait = kow_tow_travels
	}
	
	immediate = {
		if = {
			limit = {
				NOT = {
					check_variable = {
						which = china_kow_tow_travel_events
						value = 1
					}
				}
			} 
			### No more travel events - Move on to China conclusion
			#character_event = { id = JD.32290 days = 50 random = 30 }
			if = {
				limit = {
					e_china = {
						holder_scope = {
							prisoner = no
							NOT = {
								trait = incapable
							}
							is_inaccessible_trigger = no
							is_adult = yes
						}
					}
				}
				ROOT = {
					character_event = { id = kowtow.17 days = 50 random = 30 } # Check if the EoC is available, then fire an event depending on this
				}
			}
			break = yes
		}
		
		# Fire a random travel event
		random_list = {
			50 = { # Visit Temple
				trigger = {
					NOT = { has_character_flag = kow_tow_visited_temple }
				}
				character_event = {
					id = JD.32216
				}
				break = yes
			}
			50 = { # Play GO
				trigger = {
					NOT = { has_character_flag = kow_tow_played_go }
				}
				modifier = {
					factor = 2
					trait = gamer
				}
				character_event = {
					id = JD.32211
				}
				break = yes
			}
			50 = { # Discuss the Writings of Master Guan
				character_event = { id = JD.15015 }
				trigger = {
					#has_character_flag = kow_tow_actually
					NOT = { has_character_flag = read_the_guanzi }
				}
			}
			50 = {  # Visit the markets
				trigger = { NOT = { has_character_flag = visited_market } }
				character_event = { id = JD.15016 }
			}
		}
	}
}

# You spot a group of people playing GO in the park
character_event = {
	id = JD.32211
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
	desc = EVTDESC_JD_32211
	
	picture = GFX_evt_garden
    border = GFX_event_normal_frame_diplomacy
	
	is_triggered_only = yes
	
	trigger = {
		trait = kow_tow_travels
	}
	
	immediate = {
		set_character_flag = kow_tow_played_go
	}
	
	option = { # Let me show you how it's done
		name = EVTOPTA_JD_32211
		trigger = {
			trait = gamer
		}
		tooltip_info = gamer
		
		wealth = 50
		if = {
			limit = {
				NOT = { trait = proud }
			}
			add_trait = proud
		}
		custom_tooltip = {
			text = EVTTOOLTIP_JD_GOOD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				change_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 2
				}
			}
		}
	}
	
	option = { # Let me try that
		name = EVTOPTB_JD_32211
		trigger = {
			NOT = {
				trait = gamer
			}
		}
		
		random_list = {
			65 = {
				wealth = 25
			}
			35 = {
				wealth = -10
			}
		}
		custom_tooltip = {
			text = EVTTOOLTIP_JD_GOOD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				change_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 2
				}
			}
		}
	}
	
	option = {
		name = EVTOPTC_JD_32211 # I'll just enjoy the park instead
		
		random_list = {
			50 = {
				add_trait = patient
			}
			50 = {
				add_trait = humble
			}
		}
	}
	
	after = {
		return_to_china_tombola_effect = yes
	}
}

# You visit a local temple
character_event = {
	id = JD.32216
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
	desc = EVTDESC_JD_32216
	
	picture = GFX_evt_china_diplomatic_incident
    border = GFX_event_normal_frame_diplomacy
	
	is_triggered_only = yes
	
	trigger = {
		trait = kow_tow_travels
	}
	
	immediate = {
		set_character_flag = kow_tow_visited_temple
	}
	
	option = { # Study their rituals
		name = EVTOPTA_JD_32216
		trigger = {
			NOR = {
				trait = zealous
				religion_group = indian_group # Eastern religion group
			}
		}
		add_trait = sympathy_indian # Sympathy for eastern religions
	}
	
	option = { # Join in the ceremony
		name = EVTOPTB_JD_32216
		
		if = {
			limit = {
				trait = zealous
				NOT = { religion_group = indian_group } # Eastern religion group 
			}
			remove_trait = zealous
		}
		random = {
			chance = 30
			add_trait = content
		}
		custom_tooltip = {
			text = EVTTOOLTIP_JD_GOOD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				change_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 3
				}
			}
		}
	}
	
	option = { # Loudly criticize their heathen ways
		name = EVTOPTC_JD_32216
		trigger = {
			trait = zealous
			NOT = { religion_group = indian_group } # Eastern religion group 
		}
		
		piety = 30
		custom_tooltip = {
			text = EVTTOOLTIP_JD_BAD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				subtract_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 5
				}
			}
		}
	}
	
	option = { # Study the symbolism used in their texts.
		name = EVTOPTD_JD_32216
		random = {
			chance = 15
			change_learning = 1
		}
	}
	
	after = {
		return_to_china_tombola_effect = yes
	}
}

character_event = { # audience w/ the Emperor
	id = JD.32290
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
	desc = {
		text = EVTDESCA_JD_32290 # Bad outcome
		picture = GFX_evt_chinese_bureaucrat
		trigger = {
			OR = {
				has_character_flag = no_emperor_meeting
				has_character_flag = kow_tow_bad_outcome
			}
		}
	}
	desc = {
		text = EVTDESCB_JD_32290 # Okay outcome
		picture = GFX_evt_china_golden_age
		trigger = {
			has_character_flag = kow_tow_okay_outcome
			NOT = {
				has_character_flag = no_emperor_meeting
			}
		}
	}
	desc = {
		text = EVTDESCC_JD_32290 # Great outcome
		picture = GFX_evt_china_golden_age
		trigger = {
			has_character_flag = kow_tow_great_outcome
			NOT = {
				has_character_flag = no_emperor_meeting
			}
		}
	}
	picture = GFX_evt_china_golden_age
	
    border = GFX_event_normal_frame_diplomacy
	
	is_triggered_only = yes

	trigger = {
		trait = kow_tow_travels
	}
	
	immediate = {
		export_to_variable = {
			which = kow_tow_temp_calc
			value = diplomacy
		}
		divide_variable = {
			which = kow_tow_temp_calc
			value = 2
		}
		change_variable = {
			which = kow_tow_emperor_impression_evaluation
			which = kow_tow_temp_calc
		}
		set_variable = { # Clearing it for save game memory optimization
			which = kow_tow_temp_calc
			value = 0
		}
		if = {
			limit = {
				real_tier = KING
			}
			change_variable = {
				which = kow_tow_emperor_impression_evaluation
				value = 7
			}
		}
		else_if = {
			limit = {
				real_tier = EMPEROR
			}
			change_variable = {
				which = kow_tow_emperor_impression_evaluation
				value = 14
			}
		}
		else_if = {
			limit = {
				can_have_confucian_bureaucracy_and_eastern_imperial_trigger = yes
			}
			change_variable = {
				which = kow_tow_emperor_impression_evaluation
				value = 5
			}
		}
		
		#if = {
		#	limit = {
		#		disliked_by_offmap = {
		#			type = offmap_china
		#		}
		#	}
		#	subtract_variable = {
		#		which = kow_tow_emperor_impression_evaluation
		#		value = 5
		#	}
		#}
		#else_if = {
		#	limit = {
		#		liked_by_offmap = {
		#			type = offmap_china
		#		}
		#	}
		#	change_variable = {
		#		which = kow_tow_emperor_impression_evaluation
		#		value = 5
		#	}
		#}
		
		random_list = {
			45 = { # Bad outcome
				set_character_flag = kow_tow_bad_outcome
				trigger = {
					NOT = {
						check_variable = {	
							which = kow_tow_emperor_impression_evaluation
							value = 23
						}
					}
				}
				modifier = {
					factor = 0.85
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 12
					}
				}
				modifier = {
					factor = 0.85
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 13
					}
				}
				modifier = {
					factor = 0.85
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 14
					}
				}
				modifier = {
					factor = 0.85
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 15
					}
				}
				modifier = {
					factor = 0.85
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 17
					}
				}
				modifier = {
					factor = 0.85
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 19
					}
				}
				modifier = {
					factor = 0.85
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 21
					}
				}
			}
			45 = { # Okay outcome
				set_character_flag = kow_tow_okay_outcome
			}
			10 = { # Great outcome
				set_character_flag = kow_tow_great_outcome
				trigger = {
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 10
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 12
					}
				}
				#modifier = {
				#	factor = 1.1
				#	check_variable = {	
				#		which = kow_tow_emperor_impression_evaluation
				#		value = 12
				#	}
				#}							
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 13
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 14
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 15
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 17
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 19
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 21
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 23
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 25
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 27
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 29
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 31
					}
				}
				modifier = {
					factor = 1.1
					check_variable = {	
						which = kow_tow_emperor_impression_evaluation
						value = 33
					}
				}
			}
		}
	}
	
	option = {
		name = EVTOPTA_JD_32290 # Perform kow-tow before the Emperor
		trigger = {
			OR = {
				has_character_flag = kow_tow_bad_outcome
				has_character_flag = no_emperor_meeting
			}
		}
		add_trait = kow_tow_completed_tier_1
		hidden_tooltip = {
			character_event = { id = kowtow.21 days = 365 }
		}
		#add_offmap_currency = {
		#	offmap = offmap_china
		#	value = 100
		#}
		change_variable = {
			which = grace
			value = 100
		}
		set_character_flag = grace_character
		if = {
			limit = {
				is_nomadic = yes
			}
			prestige = -250
		}
		else = {
			trigger_switch = {
				on_trigger = real_tier
				DUKE = { prestige = -250 }
				KING = { prestige = -500 }
				EMPEROR = { prestige = -1000 }
			}
		}
	}
	
	option = {
		name = EVTOPTB_JD_32290 # Refuse the humiliation
		trigger = {
			OR = { # Intentionally changed from vanilla; the EoC could be a player, so the event is different!
				has_character_flag = kow_tow_bad_outcome
				has_character_flag = no_emperor_meeting
			}
		}
	}
	
	option = {
		name = EVTOPTC_JD_32290 # Perform kow-tow before the Emperor
		trigger = { # Intentionally changed from vanilla; the EoC could be a player, so the event is different!
			has_character_flag = kow_tow_okay_outcome
			NOT = {
				has_character_flag = no_emperor_meeting
			}
		}
		add_trait = kow_tow_completed_tier_2
		hidden_tooltip = {
			character_event = { id = kowtow.21 days = 30 }
		}
		#add_offmap_currency = {
		#	offmap = offmap_china
		#	value = 100
		#}
		change_variable = {
			which = grace
			value = 100
		}
		set_character_flag = grace_character
		if = {
			limit = {
				is_nomadic = yes
			}
			prestige = -250
		}
		else = {
			trigger_switch = {
				on_trigger = real_tier
				DUKE = { prestige = -250 }
				KING = { prestige = -500 }
				EMPEROR = { prestige = -1000 }
			}
		}
	}
	
	option = {
		name = EVTOPTD_JD_32290 # Perform kow-tow before the Emperor
		trigger = {
			has_character_flag = kow_tow_great_outcome
			NOT = {
				has_character_flag = no_emperor_meeting
			}
		}
		add_trait = kow_tow_completed_tier_3
		hidden_tooltip = {
			character_event = { id = kowtow.21 days = 30 }
		}
		#add_offmap_currency = {
		#	offmap = offmap_china
		#	value = 100
		#}
		change_variable = {
			which = grace
			value = 100
		}
		set_character_flag = grace_character
		if = {
			limit = {
				is_nomadic = yes
			}
			prestige = -250
		}
		else = {
			trigger_switch = {
				on_trigger = real_tier
				DUKE = { prestige = -250 }
				KING = { prestige = -500 }
				EMPEROR = { prestige = -1000 }
			}
		}
	}
	
	after = {
		clr_character_flag = kow_tow_bad_outcome
		clr_character_flag = kow_tow_okay_outcome
		clr_character_flag = kow_tow_great_outcome
		clean_up_after_kow_tow_effect = yes
	}
}



## Kow-Tow traveling event: You encounter Mercenaries (how? Depends on the status of China)
#character_event = {
#    id = JD.15000
#	has_dlc = "Jade Dragon"
#	
#	title = EVTTITLE_JD_KOWTOW
#    border = GFX_event_normal_frame_diplomacy
#    is_triggered_only = yes
#
#    hide_window = yes
#
#    trigger = {
#        always = no # Messy!
#    }
#
#    immediate = {
#    	set_character_flag = met_mercenaries
#        random_independent_ruler = {
#            limit = {
#                ai = yes
#                #is_adult = yes
#                #is_landed = yes
#                mercenary = yes
#                OR = {
#                	culture_group = chinese_group
#                	#AND = {
#                	#	offmap_china = { has_status = china_jurchen_invasion }
#                	#	culture = jurchen
#                	#}
#                	#AND = {
#                	#	offmap_china = { has_status = china_mongol_invasion }
#                	#	culture = mongol
#                	#}
#                }
#				primary_title = {
#					NOT = { has_raised_standing_troops = yes }
#				}
#            }
#            save_event_target_as = other_ruler
#        }
#        
#        #offmap_china = {
#        #    trigger_switch = {
#        #        on_trigger = has_status
#        #        china_stable = { ROOT = { set_character_flag = china_stable } }
#        #        china_unrest = { ROOT = { set_character_flag = china_unrest } }
#        #        china_civil_war = { ROOT = { set_character_flag = china_civil_war } }
#        #        china_mongol_invasion = { ROOT = { set_character_flag = china_mongol_invasion } }
#        #        china_jurchen_invasion = { ROOT = { set_character_flag = china_jurchen_invasion } }
#        #        china_famine = { ROOT = { set_character_flag = china_famine } }
#        #        china_plague = { ROOT = { set_character_flag = china_plague } }
#        #        china_golden_age = { ROOT = { set_character_flag = china_golden_age } }
#        #    }
#        #}
#		
#		if = {
#			limit = {
#				e_china = {
#					holder_scope = {
#						NOT = {
#							any_war = {
#								OR = {
#									attacker = {
#										character = PREV
#									}
#									defender = {
#										character = PREV
#									}
#								}
#							}
#						}
#						# "Send Relief" check
#						NOR = {
#							AND = {
#								NOT = {
#									realm_size = 100
#								}
#								any_realm_province = {
#									count = 3
#									OR = {
#										has_province_modifier = depopulated_1
#										has_province_modifier = depopulated_2
#										has_province_modifier = depopulated_3
#									}
#								}
#							}
#							AND = {
#								realm_size = 100
#								NOT = {
#									realm_size = 200
#								}
#								any_realm_province = {
#									count = 6
#									OR = {
#										has_province_modifier = depopulated_1
#										has_province_modifier = depopulated_2
#										has_province_modifier = depopulated_3
#									}
#								}
#							}
#							AND = {
#								realm_size = 200
#								NOT = {
#									realm_size = 300
#								}
#								any_realm_province = {
#									count = 9
#									OR = {
#										has_province_modifier = depopulated_1
#										has_province_modifier = depopulated_2
#										has_province_modifier = depopulated_3
#									}
#								}
#							}
#							AND = {
#								realm_size = 300
#								NOT = {
#									realm_size = 400
#								}
#								any_realm_province = {
#									count = 12
#									OR = {
#										has_province_modifier = depopulated_1
#										has_province_modifier = depopulated_2
#										has_province_modifier = depopulated_3
#									}
#								}
#							}
#							AND = {
#								realm_size = 400
#								any_realm_province = {
#									count = 15
#									has_disease = yes
#								}
#							}
#						}
#						# "Send Physician" check
#						NOR = {
#							AND = {
#								NOT = {
#									realm_size = 100
#								}
#								any_realm_province = {
#									count = 6
#									has_disease = yes
#								}
#							}
#							AND = {
#								realm_size = 100
#								NOT = {
#									realm_size = 200
#								}
#								any_realm_province = {
#									count = 12
#									has_disease = yes
#								}
#							}
#							AND = {
#								realm_size = 200
#								NOT = {
#									realm_size = 300
#								}
#								any_realm_province = {
#									count = 18
#									has_disease = yes
#								}
#							}
#							AND = {
#								realm_size = 300
#								NOT = {
#									realm_size = 400
#								}
#								any_realm_province = {
#									count = 24
#									has_disease = yes
#								}
#							}
#							AND = {
#								realm_size = 400
#								any_realm_province = {
#									count = 30
#									has_disease = yes
#								}
#							}
#						}
#					}
#				}
#			}
#			set_character_flag = china_stable
#		}
#		
#		if = {
#			limit = {
#				e_china = {
#					holder_scope = {
#						any_war = {
#							OR = {
#								attacker = {
#									character = PREV
#								}
#								defender = {
#									character = PREV
#								}
#							}
#						}
#					}
#				}
#			}
#			set_character_flag = china_war
#		}
#		
#		if = {
#			limit = {
#				e_china = {
#					holder_scope = {
#						# "Send Relief" check
#						OR = {
#							AND = {
#								NOT = {
#									realm_size = 100
#								}
#								any_realm_province = {
#									count = 3
#									OR = {
#										has_province_modifier = depopulated_1
#										has_province_modifier = depopulated_2
#										has_province_modifier = depopulated_3
#									}
#								}
#							}
#							AND = {
#								realm_size = 100
#								NOT = {
#									realm_size = 200
#								}
#								any_realm_province = {
#									count = 6
#									OR = {
#										has_province_modifier = depopulated_1
#										has_province_modifier = depopulated_2
#										has_province_modifier = depopulated_3
#									}
#								}
#							}
#							AND = {
#								realm_size = 200
#								NOT = {
#									realm_size = 300
#								}
#								any_realm_province = {
#									count = 9
#									OR = {
#										has_province_modifier = depopulated_1
#										has_province_modifier = depopulated_2
#										has_province_modifier = depopulated_3
#									}
#								}
#							}
#							AND = {
#								realm_size = 300
#								NOT = {
#									realm_size = 400
#								}
#								any_realm_province = {
#									count = 12
#									OR = {
#										has_province_modifier = depopulated_1
#										has_province_modifier = depopulated_2
#										has_province_modifier = depopulated_3
#									}
#								}
#							}
#							AND = {
#								realm_size = 400
#								any_realm_province = {
#									count = 15
#									has_disease = yes
#								}
#							}
#						}
#					}
#				}
#			}
#			set_character_flag = china_famine # Works for our purposes
#		}
#		
#		if = {
#			limit = {
#				e_china = {
#					holder_scope = {
#						# "Send Physician" check
#						OR = {
#							AND = {
#								NOT = {
#									realm_size = 100
#								}
#								any_realm_province = {
#									count = 6
#									has_disease = yes
#								}
#							}
#							AND = {
#								realm_size = 100
#								NOT = {
#									realm_size = 200
#								}
#								any_realm_province = {
#									count = 12
#									has_disease = yes
#								}
#							}
#							AND = {
#								realm_size = 200
#								NOT = {
#									realm_size = 300
#								}
#								any_realm_province = {
#									count = 18
#									has_disease = yes
#								}
#							}
#							AND = {
#								realm_size = 300
#								NOT = {
#									realm_size = 400
#								}
#								any_realm_province = {
#									count = 24
#									has_disease = yes
#								}
#							}
#							AND = {
#								realm_size = 400
#								any_realm_province = {
#									count = 30
#									has_disease = yes
#								}
#							}
#						}
#					}
#				}
#			}
#			set_character_flag = china_plague
#		}
#
#        event_target:other_ruler = {
#            character_event = { id = JD.15001 }
#        }
#    }
#}
#
#character_event = { #PING EVENT for the Mercenary leader...
#    id = JD.15001
#	has_dlc = "Jade Dragon"
#    hide_window = yes
#    is_triggered_only = yes
#	
#    immediate = {
#    	FROM = {
#    		random_list = {
#    			10 = {
#    				character_event = { id = JD.15002 } #Mercenaries wants root to pay a "bridge fee"...
#    				trigger = {
#						OR = {
#				    		has_character_flag = china_war
#			    		}
#    				}
#    			}
#    			10 = {
#    				character_event = { id = JD.15003 } #Mercenaries are here to escort root...
#    				trigger = {
#						OR = {
#				    		has_character_flag = china_stable
#				    		has_character_flag = china_war
#			    		}
#    				}
#    			}
#    			10 = {
#    				character_event = { id = JD.15004 } #Meet a starving mercenary band...
#    				trigger = {
#						OR = {
#				    		has_character_flag = china_famine
#				    		has_character_flag = china_plague
#			    		}
#    				}
#    			}
#    		}
#    	}
#    }
#}
#
#character_event = { #Mercenaries wants root to pay a "bridge fee"...
#    id = JD.15002
#	has_dlc = "Jade Dragon"
#	
#	title = EVTTITLE_JD_KOWTOW
#    desc = EVTDESC_JD_15002
#    picture = GFX_evt_china_diplomatic_success
#    border = GFX_event_normal_frame_diplomacy
#    is_triggered_only = yes
#
#	trigger = {
#		trait = kow_tow_travels
#	}
#	
#    option = { # Pay the fee to the bridge guards...
#    	name = EVTOPTA_JD_15002
#
#    	transfer_scaled_wealth = {
#			to = FROM
#			value = 0.25
#			min = 50
#		}
#		
#		prestige = -100
#
#    	custom_tooltip = {
#    		text = EVTOPTA_JD_15002_tt
#    	}
#    }
#    option = { # Kill him (IMPALER ONLY)
#    	name = EVTOPTC_JD_15002
#    	tooltip_info = impaler
#       	custom_tooltip = {
#    		text = EVTOPTC_JD_15002_tt
#		}
#		if = {
#			limit = {
#				has_dlc = "Jade Dragon"
#				# ROOT cannot be the EoC
#			}
#			# FROM cannot be the EoC
#			if = {
#				limit = {
#					FROM = {
#						is_chinese_emperor_trigger = no
#						any_close_relative = {
#							dynasty = ROOT
#							is_chinese_emperor_trigger = yes
#						}
#					}
#				}
#				detract_grace_massive_effect = yes
#			}
#		}
#    	FROM = { death = { death_reason = death_murder_butchered killer = FROM } }
#    	trigger = {
#    		trait = impaler
#    	}
#    }
#
#    option = {
#    	name = EVTOPTB_JD_15002
#
#    	random_list = {
#    		50 = {
#		    	modifier = { is_strong_trigger = yes factor = 2 }
#				modifier = { FROM = { is_weak_trigger = yes } factor = 2 }
#				modifier = { combat_rating_diff = { who = FROM value = 1 } factor = 2 } 
#				modifier = { attribute_diff = { character = FROM attribute = martial value = 3 } factor = 2 }
#
#				#You get away
#				custom_tooltip = { text = you_get_away_tt }
#    		}
#    		10 = {
#    			modifier = { is_weak_trigger = yes factor = 1.5 }
#    			hidden_effect = { add_maimed_trait_effect = yes }
#
#    			#You get injured
#				if = {
#					limit = {
#						has_dlc = "Jade Dragon"
#						# FROM cannot be the EoC
#					}
#					# ROOT cannot be the EoC
#					if = {
#						limit = {
#							is_chinese_emperor_trigger = no
#							any_close_relative = {
#								dynasty = ROOT
#								is_chinese_emperor_trigger = yes
#							}
#						}
#						FROM = {
#							detract_grace_massive_effect = yes
#						}
#					}
#					if = {
#						limit = {
#							is_chinese_emperor_trigger = no
#							NOT = {
#								any_close_relative = {
#									dynasty = ROOT
#									is_chinese_emperor_trigger = yes
#								}
#							}
#							any_dynasty_member = {
#								is_chinese_emperor_trigger = yes
#							}
#						}
#						FROM = {
#							detract_grace_major_effect = yes
#						}
#					}
#				}
#    			custom_tooltip = { text = you_dont_get_away_tt }
#    		}
#    		5 = {
#    			modifier = { is_weak_trigger = yes factor = 2 }
#				if = {
#					limit = {
#						has_dlc = "Jade Dragon"
#						# FROM cannot be the EoC
#					}
#					# ROOT cannot be the EoC
#					if = {
#						limit = {
#							is_chinese_emperor_trigger = no
#							any_close_relative = {
#								dynasty = ROOT
#								is_chinese_emperor_trigger = yes
#							}
#						}
#						FROM = {
#							detract_grace_massive_effect = yes
#						}
#					}
#					if = {
#						limit = {
#							is_chinese_emperor_trigger = no
#							NOT = {
#								any_close_relative = {
#									dynasty = ROOT
#									is_chinese_emperor_trigger = yes
#								}
#							}
#							any_dynasty_member = {
#								is_chinese_emperor_trigger = yes
#							}
#						}
#						FROM = {
#							detract_grace_major_effect = yes
#						}
#					}
#				}
#    			hidden_effect = { death = { death_reason = death_duel killer = FROM } }
#
#    			#You are slain in personal combat!
#    			custom_tooltip = { text = you_will_be_killed_in_a_duel_tt }
#    		}
#    	}
#   	}
#
#    after = {
#        clr_character_flag = china_stable
#        clr_character_flag = china_unrest
#        clr_character_flag = china_civil_war
#        clr_character_flag = china_mongol_invasion
#        clr_character_flag = china_jurchen_invasion
#        clr_character_flag = china_famine
#        clr_character_flag = china_plague
#        clr_character_flag = china_golden_age
#        return_to_travel_tombola_effect = yes
#    }
#}
#
#character_event = { #Mercenaries: "We're here to escort you!"
#    id = JD.15003
#	has_dlc = "Jade Dragon"
#	
#	title = EVTTITLE_JD_KOWTOW
#    desc = EVTDESC_JD_15003 
#    picture = GFX_evt_china_rebel_general
#    border = GFX_event_normal_frame_diplomacy
#    is_triggered_only = yes
#	
#	trigger = {
#		trait = kow_tow_travels
#	}
#	
#    option = { # Er, change of plans! (Hire bodygaurds)
#    	name = EVTOPTA_JD_15003
#    	custom_tooltip = {
#    		text = EVTOPTA_JD_15003_tt
#    	}
#    	transfer_scaled_wealth = {
#			to = FROM
#			value = 0.5
#			min = 10
#		}
#    	add_character_modifier = {
#			name = hired_body_guards
#			years = 3
#		}
#    }
#    option = { #I think you have me confused with someone else...
#    	name = EVTOPTB_JD_15003
#    	custom_tooltip = {
#    		text = EVTOPTB_JD_15003_tt
#    	}    	
#    }
#
#    after = {
#        clr_character_flag = china_stable
#        clr_character_flag = china_unrest
#        clr_character_flag = china_civil_war
#        clr_character_flag = china_mongol_invasion
#        clr_character_flag = china_jurchen_invasion
#        clr_character_flag = china_famine
#        clr_character_flag = china_plague
#        clr_character_flag = china_golden_age
#		return_to_travel_tombola_effect = yes
#    }
#}

#character_event = { #We see starving people...
#    id = JD.15004
#	has_dlc = "Jade Dragon"
#	
#	title = EVTTITLE_JD_KOWTOW
#    desc = EVTDESC_JD_15004
#    picture = GFX_evt_china_famine
#    border = GFX_event_normal_frame_diplomacy
#    is_triggered_only = yes
#
#	trigger = {
#		trait = kow_tow_travels
#	}
#	
#    immediate = {
#	    hidden_effect = {
#	    	#event_target:other_ruler = { trait = stressed }
#	    }
#    }
#    
#    option = { #Let's eat together, yes.
#    	name = EVTOPTA_JD_15004
#    	custom_tooltip = { text = EVTOPTA_JD_15004_tt }
#		
#		scaled_wealth = { value = -0.2 min = -25 }
#
#		add_friend = event_target:other_ruler
#		
#		add_character_modifier = {
#			name = the_kind
#			years = 10
#		}
#		
#		if = {
#			limit = {
#				trait = greedy
#			}
#			remove_trait = greedy
#		}
#		else_if = {
#			limit = {
#				NOT = {
#					trait = charitable
#				}
#			}
#			add_trait = charitable
#		}
#    }
#    option = {
#        name = EVTOPTB_JD_15004 #Come work for me! You, in particular!
#        custom_tooltip = { text = EVTOPTB_JD_15004_tt }
#
#    	scaled_wealth = { value = -0.05 min = -5 }
#
#    	hidden_effect = {
#	        event_target:other_ruler = {
#	        	transfer_crown_on_abdication_effect = yes
#	        	abdicate = yes
#	        	move_character = ROOT
#	        }
#    	}
#
#    	reverse_opinion = {
#			who = event_target:other_ruler
#			modifier = opinion_loyal_servant
#			years = 100
#		}
#		hidden_effect = {
#			event_target:other_ruler = {
#				add_character_modifier = { name = mercenary_traditions duration = -1 }
#			}
#		}
#    }
#    option = { #We can't afford to take pity on strangers...!
#        name = EVTOPTC_JD_15004
#        custom_tooltip = { text = EVTOPTC_JD_15004_tt }
#    }
#	
#	after = {
#        clr_character_flag = china_stable
#        clr_character_flag = china_unrest
#        clr_character_flag = china_civil_war
#        clr_character_flag = china_mongol_invasion
#        clr_character_flag = china_jurchen_invasion
#        clr_character_flag = china_famine
#        clr_character_flag = china_plague
#        clr_character_flag = china_golden_age
#        return_to_travel_tombola_effect = yes
#    }
#}
	
# You feel homesick...
character_event = {
    id = JD.15010 #I really miss X.
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
    desc = EVTDESC_JD_15010
    picture = GFX_evt_carriage_default
    border = GFX_event_normal_frame_diplomacy
    is_triggered_only = yes

	trigger = {
		trait = kow_tow_travels
	}

    immediate = {
    	set_character_flag = missed_loved_one
        any_courtier_or_vassal = { #Select someone you sort of care about at least...!
    		limit = {
    			OR = {
					is_lover = ROOT
					any_spouse = { character = ROOT }
					AND = {
						OR = {
							is_mother = ROOT
							is_father = ROOT
						}
						NOR = {
							is_lover = ROOT
							any_spouse = { character = ROOT }
						}
					}
					AND = {
						is_child_of = ROOT
						NOR = {
							is_lover = ROOT
							any_spouse = { character = ROOT }
						}
					}
					AND = {
						is_friend = ROOT
						NOR = {
							is_lover = ROOT
							any_spouse = { character = ROOT }
							is_mother = ROOT
							is_father = ROOT
							is_child_of = ROOT
						}
					}
				}
    		}
    		score_value = { #Prioritizes selecting an interesting courtier...
	            value = 10
	            interesting_courtier_selection_score = yes
	        }
    		save_event_target_as = person_missed
    	}
    }

    option = { #I will write a letter to my lover...
        name = EVTOPTA_JD_15010        
        custom_tooltip = { text = will_receive_a_letter }
        event_target:person_missed = { set_character_flag = is_lover } #for follow up event

		scaled_wealth = { value = -0.1 min = -5 }

        tooltip = {
	        reverse_opinion = {
				who = event_target:person_missed
				modifier = opinion_love_letters
				years = 15
			}
		}

		trigger = {
			event_target:person_missed = {
				is_lover = ROOT
			}
		}
    }
    option = { #I will write a letter to my friend...
        name = EVTOPTB_JD_15010    
		custom_tooltip = { text = will_receive_a_letter }
		event_target:person_missed = { set_character_flag = is_friend } #for follow up event

		scaled_wealth = { value = -0.1 min = -5 }

		tooltip = {
	        reverse_opinion = {
				who = event_target:person_missed
				modifier = opinion_pen_pal
				years = 15
			}
		}

		trigger = {
			event_target:person_missed = {
				is_friend = ROOT
				NOR = {
					is_lover = ROOT
					any_spouse = { character = ROOT }
					is_mother = ROOT
					is_father = ROOT
					is_child_of = ROOT
				}
			}
		}
    }
    option = { #I will write a letter to my spouse...!
        name = EVTOPTC_JD_15010
        custom_tooltip = { text = will_receive_a_letter }
        event_target:person_missed = { set_character_flag = is_spouse } #for follow up event

        scaled_wealth = { value = -0.1 min = -5 }
        
        tooltip = {
	        reverse_opinion = {
				who = event_target:person_missed
				modifier = opinion_love_letters
				years = 15
			}	
		}

		trigger = {
			event_target:person_missed = {
				any_spouse = { character = ROOT }
				NOT = { is_lover = ROOT }
			}
		}
    }
    option = { #I will write a letter to my parent...
        name = EVTOPTD_JD_15010
        custom_tooltip = { text = will_receive_a_letter }
        event_target:person_missed = { set_character_flag = is_parent } #for follow up event

        scaled_wealth = { value = -0.1 min = -5 }

        tooltip = {
        	reverse_opinion = {
				who = event_target:person_missed
				modifier = opinion_delighted_parent
				years = 15
			}
		}
		trigger = {
			event_target:person_missed = {
				OR = {
					is_mother = ROOT
					is_father = ROOT
				}
				NOR = {
					is_lover = ROOT
					any_spouse = { character = ROOT }
				}
			}
		}
    }
    option = { #I will write a letter to my child...
        name = EVTOPTE_JD_15010
        custom_tooltip = { text = will_receive_a_letter }
        event_target:person_missed = { set_character_flag = is_child } #for follow up event

        scaled_wealth = { value = -0.1 min = -5 }
        
        tooltip = {
	        reverse_opinion = {
				who = event_target:person_missed
				modifier = opinion_pen_pal
				years = 15
			}
        }

		trigger = {
			OR = {
				is_mother = event_target:person_missed
				is_father = event_target:person_missed
			}
			event_target:person_missed = {
				NOR = {
					is_lover = ROOT
					any_spouse = { character = ROOT }
				}
			}
		}
    }
    option = { #No! Time is of the essence...!
        name = EVTOPTF_JD_15010
        hidden_effect = { set_character_flag = do_nothing }
    }

    after = {
    	if = { limit = { NOT = { has_character_flag = do_nothing } }
    		event_target:person_missed = { character_event = { id = JD.15011 } }
    	}
    	else = {
    		clr_character_flag = do_nothing
    	}
    	return_to_travel_tombola_effect = yes
    }
}

character_event = { # Selected target receives letter from you...!
    id = JD.15011
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
    picture = GFX_evt_recieve_letter
    border = GFX_event_normal_frame_diplomacy
    is_triggered_only = yes

    desc = {
    	text = EVTDESC_JD_15011_A
    	trigger = {
    		NOT = { is_child_of = FROM }
    	}
    }
    desc = {
    	text = EVTDESC_JD_15011_B
    	trigger = {
    		is_child_of = FROM
    	}
    }

    option = {
        name = {
        	text = EVTOPTA_JD_15011_A
        	trigger = { NOT = { is_child_of = FROM } }
        }
        name = {
        	text = EVTOPTA_JD_15011_B
        	trigger = { is_child_of = FROM }
        }

        if = {
        	limit = {
        		OR = {
        			has_character_flag = is_child
        			has_character_flag = is_friend
        		}

        	}
	        opinion = {
				who = FROM
				modifier = opinion_pen_pal
				years = 15
			}
        }
        if = {
			limit = {
				OR = {
					has_character_flag = is_lover
					has_character_flag = is_spouse
				}
			}
	        opinion = {
				who = FROM
				modifier = opinion_love_letters
				years = 15
			}
        }
        if = {
			limit = { has_character_flag = is_parent }
	        opinion = {
				who = FROM
				modifier = opinion_delighted_parent
				years = 15
			}
        }
    }
}

character_event = { #Learn about political philosophy or attempt to impress pretty [man/woman]
    id = JD.15015
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
    desc = EVTDESC_JD_15015
    picture = GFX_evt_chinese_bureaucrat
    border = GFX_event_normal_frame_diplomacy
    is_triggered_only = yes

	trigger = {
		trait = kow_tow_travels
	}
	
    immediate = {
    	set_character_flag = read_the_guanzi
    }

    option = { #I would love to hear more about political philosophy!
        name = EVTOPTA_JD_15015
        custom_tooltip = { text = EVTOPTA_JD_15015_TT } #They like your enthusiasm!
        custom_tooltip = {
			text = EVTTOOLTIP_JD_GOOD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				change_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 3
				}
			}
		}
    }
    option = { #Actually, I'm already well familiar with 'the Guanzi', my lords (poet)
        name = EVTOPTB_JD_15015
        custom_tooltip = { text = EVTOPTB_JD_15015_TT } #They are impressed...!
        prestige = 50
        custom_tooltip = {
			text = EVTTOOLTIP_JD_GOOD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				change_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 3
				}
			}
		}
        tooltip_info = poet
		trigger = { 
			trait = poet
			NOT = { trait = scholar }
		}
    }
    option = { #Actually, I'm already well familiar with 'the Guanzi', my lords. (scholar)
        name = EVTOPTB_JD_15015
        custom_tooltip = { text = EVTOPTB_JD_15015_TT } #They are impressed..!
        prestige = 100
        
        custom_tooltip = {
			text = EVTTOOLTIP_JD_GOOD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				change_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 3
				}
			}
		}
        tooltip_info = scholar
		trigger = { trait = scholar }
    }
    option = { #I'd rather see the palace...
        name = EVTOPTC_JD_15015
        custom_tooltip = { text = EVTOPTC_JD_15015_TT } #They make sure you are accompanied...

        random = {
        	chance = 30
        	change_stewardship = 1
        }

        custom_tooltip = {
			text = EVTTOOLTIP_JD_BAD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				subtract_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 5
				}
			}
		}
    }
    after = {
    	return_to_china_tombola_effect = yes
    }
}

character_event = { #Visit the market
    id = JD.15016
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
    desc = EVTDESC_JD_15016
    picture = GFX_evt_china_stable
    border = GFX_event_normal_frame_diplomacy
    is_triggered_only = yes

	trigger = {
		trait = kow_tow_travels
	}
	
    hide_from = yes
    immediate = {
    	set_character_flag = visited_market
    	hidden_effect = {
			e_china = {
				holder_scope = {
					create_random_steward  = {
						age = 45
						random_traits = yes
						female = 50
						dynasty = none
						attributes = {
							stewardship = 3
						}
						health = 10
					}
					new_character = {
						save_event_target_as = chinese_trader
						give_nickname = nick_the_trader
	    				add_chinese_artifact_effect = yes
					}
				}
			}
    	}
    }

    option = { #What is that scent...? Mmhm!
        name = EVTOPTA_JD_15016
        custom_tooltip = { text = EVTOPTA_JD_15016_TT } #you partake in the local cuisine!

        random = {
        	chance = 50
        	add_trait_gluttonous_effect = yes
        }
        custom_tooltip = {
			text = EVTTOOLTIP_JD_GOOD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				change_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 3
				}
			}
		}
    }
    option = { #Let's trade, you there!
        name = EVTOPTB_JD_15016
        custom_tooltip = { text = EVTOPTB_JD_15016_TT }
		
		scaled_wealth = { value = -0.6 min = -200 }

        hidden_effect = {
	        event_target:chinese_trader = {
	        	event_target:chinese_artifact = {
		        	transfer_artifact = {
						from = PREV
						to = PREVPREV
					}
	        	}
	        	death = { death_reason =  death_missing }
	        }
        }

        custom_tooltip = {
			text = EVTTOOLTIP_JD_GOOD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				change_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 3
				}
			}
		}
		trigger = { #only if you don't already have a ton of chinese artifacts
			NOT = {
				any_artifact = {
					count = 13
					has_artifact_flag = chinese
				}			
			}
		}
    }

    option = { #Steal a Chinese artifact in the market!
        name = EVTOPTC_JD_15016
        custom_tooltip = { text = EVTOPTC_JD_15016_TT }
        tooltip_info = intrigue

		custom_tooltip = {
			text = EVTTOOLTIP_JD_BAD_INFLUENCE_ON_EMPEROR_EVALUATION
			hidden_effect = {
				subtract_variable = {
					which = kow_tow_emperor_impression_evaluation
					value = 3
				}
			}
		}

        hidden_effect = {
	        event_target:chinese_trader = {
	        	event_target:chinese_artifact = {
		        	transfer_artifact = {
						from = PREV
						to = PREVPREV
					}
	        	}
	        }
        }
        trigger = {
        	OR = {
        		trait = elusive_shadow
        		intrigue = 15
        	}
        }
    }

    option = { #I just wanna go home.
        name = EVTOPTD_JD_15016
    }

    after = {
    	return_to_china_tombola_effect = yes
    	hidden_effect = {
	        event_target:chinese_trader = { #removes the trader from the game, along with their artifact (if you didn't trade)...
	        	any_artifact = { destroy_artifact = yes }
	        	death = { death_reason =  death_missing }
	        }
        }
    }
}

#character_event = { #Encounter a merchant..!
#    id = JD.15017
#	has_dlc = "Jade Dragon"
#	
#	title = EVTTITLE_JD_KOWTOW
#    desc = EVTDESC_JD_15017
#    picture = GFX_evt_china_stable
#    border = GFX_event_normal_frame_diplomacy
#    is_triggered_only = yes
#   	portrait = event_target:chinese_trader
#
#	trigger = {
#		trait = kow_tow_travels
#	}
#	
#    immediate = {
#    	set_character_flag = met_traveling_merchant
#		hidden_effect = {
#			e_china = {
#				holder_scope = {
#					create_random_intriguer  = {
#						age = 25
#						random_traits = yes
#						female = 50
#						dynasty = none
#						attributes = {
#							intrigue = 4
#						}
#					}
#					new_character = {
#						upgrade_education_effect = yes
#						save_event_target_as = chinese_trader
#	    				add_chinese_artifact_effect = yes
#					}
#				}
#			}
#    	}
#    }
#
#    option = {      
#        name = EVTOPTA_JD_15017 #I'd love to take it off your hands!
#        custom_tooltip = { text = EVTOPTA_JD_15017_TT }
#
#		scaled_wealth = { value = -0.4 min = -150 }
#
#        hidden_effect = {
#	        event_target:chinese_trader = {
#	        	event_target:chinese_artifact = {
#		        	transfer_artifact = {
#						from = PREV
#						to = PREVPREV
#					}
#	        	}
#	        	death = { death_reason =  death_missing }
#	        }
#        }
#    }
#    option = { #I could use a smooth-talker like you...
#        name = EVTOPTB_JD_15017
#        custom_tooltip = { text = EVTOPTB_JD_15017_TT }
#        hidden_effect = {
#	        event_target:chinese_trader = {
#	        	show_scope_change = no
#	        	move_character = ROOT
#	        }
#        }
#
#        tooltip_info = kind
#        trigger = { trait = kind }
#    }
#    option = {
#        name = EVTOPTC_JD_15017 #Guards! Cut this man/woman down.
#        custom_tooltip = { text = EVTOPTC_JD_15017_TT } #You steal the artifact.
#
#        event_target:chinese_trader = {
#        	show_scope_change = no
#        	death = { death_reason = death_murder }
#        }
#        custom_tooltip = { text = EVTOPTA_JD_15017_TT } #it's transfered to you.
#		hidden_effect = { #Steal the artifact
#	        event_target:chinese_trader = {
#	        	event_target:chinese_artifact = {
#		        	transfer_artifact = {
#						from = PREV
#						to = PREVPREV
#					}
#	        	}
#	        }
#        }
#
#        tooltip_info = deceitful
#        trigger = { trait = deceitful }
#    }
#    option = {      
#        name = EVTOPTD_JD_15017 #I have no use of whatever that is.
#        custom_tooltip = { text = EVTOPTD_JD_15017_TT }
#        hidden_effect = {
#	        event_target:chinese_trader = { #removes the trader from the game, along with their artifact (if you didn't trade)...
#	        	any_artifact = { destroy_artifact = yes }
#	        	death = { death_reason =  death_missing }
#	        }
#        }
#    }
#    after = {
#    	return_to_travel_tombola_effect = yes
#    }
#}

# Fired from on_policy_change
#character_event = {
#	id = JD.32298
#	has_dlc = "Jade Dragon"
#	hide_window = yes
#	
#	is_triggered_only = yes
#	
#	trigger = {
#		FROM = {
#			has_policy = china_isolationist
#		}
#	}
#	
#	immediate = {
#		any_playable_ruler = {
#			limit = {
#				trait = kow_tow_travels
#			}
#			set_character_flag = kow_tow_abort_isolationist
#			character_event = {
#				id = JD.32299
#			}
#		}
#	}
#}

### Kowtow was aborted for some reason
character_event = {
	id = JD.32299
	has_dlc = "Jade Dragon"
	
	title = EVTTITLE_JD_KOWTOW
    
	#desc = {
	#	text = EVTDESCA_JD_32299
	#	trigger = {
	#		has_character_flag = kow_tow_abort_war
   
	#	}
	#}
	#desc = {
	#	text = EVTDESCB_JD_32299
	#	trigger = {
	#		has_character_flag = kow_tow_abort_isolationist
   
	#	}
	#}
	#desc = {
	#	text = EVTDESCC_JD_32299
	#	trigger = {
	#		NOR = {
	#			has_character_flag = kow_tow_abort_war
	#			has_character_flag = kow_tow_abort_isolationist
	
	#		}
	#	}
	#}
	desc = EVTDESC_JDEXTRA_32299
    picture = GFX_evt_china_isolationist
    border = GFX_event_normal_frame_diplomacy
	
	hide_from = yes
    
	is_triggered_only = yes

	immediate = {
		remove_trait = kow_tow_travels
	}
	
	option = {
		name = EVTOPTA_JD_32299
	}
	
	after = {
		#clr_character_flag = kow_tow_abort_war
		#clr_character_flag = kow_tow_abort_isolationist
		tooltip = {
			clean_up_after_kow_tow_effect = yes
		}
	}
}