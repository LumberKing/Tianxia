# Misc events

namespace = tianxia

# IDs 1401-1500 reserved

##### Random accident death

# 1 % chance of dying in a random accident for unlanded characters that plausibly could
character_event = {
	id = tianxia.1401
	hide_window = yes
	
	is_triggered_only = yes # on_yearly_pulse -> random_events -> random_death
	
	min_age = 16
	prisoner = no
	only_capable = yes # Works fine
	
	trigger = {
		is_ruler = no
		is_inaccessible_trigger = no
	}
	
	weight_multiplier = {
		days = 1
		
		mult_modifier = {
			factor = 2
			is_unimportant_trigger = yes
		}
		
		mult_modifier = {
			factor = 0.95
			any_close_relative = {
				real_tier = baron
			}
			NOT = {
				any_close_relative = {
					higher_real_tier_than = baron
				}
			}
		}
		
		mult_modifier = {
			factor = 0.9
			any_close_relative = {
				real_tier = count
			}
			NOT = {
				any_close_relative = {
					higher_real_tier_than = count
				}
			}
		}
		
		mult_modifier = {
			factor = 0.85
			any_close_relative = {
				real_tier = duke
			}
			NOT = {
				any_close_relative = {
					higher_real_tier_than = duke
				}
			}
		}
		
		mult_modifier = {
			factor = 0.8
			any_close_relative = {
				real_tier = king
			}
			NOT = {
				any_close_relative = {
					higher_real_tier_than = king
				}
			}
		}
		
		mult_modifier = {
			factor = 0.75
			any_close_relative = {
				real_tier = emperor
			}
		}
	}
	
	immediate = {
		random_accident_death_effect = yes
	}
}

# 1 % chance of vanishing every year
character_event = {
	id = tianxia.1402
	hide_window = yes
	
	is_triggered_only = yes # on_yearly_pulse -> random_events -> random_death
	
	min_age = 16
	prisoner = no
	only_capable = yes # Works fine
	
	trigger = {
		is_ruler = no
		is_inaccessible_trigger = no
	}
	
	weight_multiplier = {
		days = 1
		
		mult_modifier = {
			factor = 2
			is_unimportant_trigger = yes
		}
		
		mult_modifier = {
			factor = 0.95
			any_close_relative = {
				real_tier = baron
			}
			NOT = {
				any_close_relative = {
					higher_real_tier_than = baron
				}
			}
		}
		
		mult_modifier = {
			factor = 0.9
			any_close_relative = {
				real_tier = count
			}
			NOT = {
				any_close_relative = {
					higher_real_tier_than = count
				}
			}
		}
		
		mult_modifier = {
			factor = 0.85
			any_close_relative = {
				real_tier = duke
			}
			NOT = {
				any_close_relative = {
					higher_real_tier_than = duke
				}
			}
		}
		
		mult_modifier = {
			factor = 0.8
			any_close_relative = {
				real_tier = king
			}
			NOT = {
				any_close_relative = {
					higher_real_tier_than = king
				}
			}
		}
		
		mult_modifier = {
			factor = 0.75
			any_close_relative = {
				real_tier = emperor
			}
		}
	}
	
	immediate = {
		death = {
			death_reason = death_missing
		}
	}
}

##### Kinslayer trait fix

# on_startup, convert non-Tribal Kinslayer to Tribal Kinslayer where relevant
character_event = {
	id = tianxia.1403
	hide_window = yes
	
	is_triggered_only = yes # on_startup
	
	only_rulers = yes
	
	trigger = {
		is_tribal = yes
		OR = {
			trait = kinslayer
			trait = familial_kinslayer
			trait = dynastic_kinslayer
		}
	}
	
	immediate = {
		add_trait = tribal_kinslayer
	}
}

##### Seclusion fix, e.g on marriage

# on_host_change, put characters in seclusion if their new host is in seclusion
character_event = {
	id = tianxia.1404
	hide_window = yes
	
	is_triggered_only = yes # on_host_change
	
	prisoner = no # Takes precedence
	
	trigger = {
		is_landed = no
		FROMFROM = {
			has_character_modifier = in_seclusion
		}
	}
	
	immediate = {
		add_character_modifier = {
			name = in_seclusion
			duration = -1
		}
	}
}

##### Artifact fix for viceroys

# on_death, ensure artefacts stick with viceroys' player heirs
character_event = {
	id = tianxia.1405
	hide_window = yes
	
	is_triggered_only = yes # on_death
	
	only_playable = yes
	
	trigger = {
		primary_title = {
			is_vice_royalty = yes
		}
		player_heir = {
			NOT = {
				ROOT = {
					current_heir = {
						character = PREVPREV
					}
				}
			}
		}
	}
	
	immediate = {
		player_heir = {
			save_event_target_as = artifact_heir
		}
		
		any_artifact = {
			limit = {
				NOR = {
					artifact_type = crown_hre
					artifact_type = iron_crown_of_lombardy
					artifact_type = crown_pahlavi
					artifact_type = crown_byzantine
					artifact_type = heirloom_seal_of_the_realm
					has_artifact_flag = imperial_regalia_of_japan
					artifact_type = preah_khan_reach
					artifact_type = crown_fylkir
					artifact_type = crown_tengri_fylkir
					artifact_type = crown_west_african_fylkir
					artifact_type = crown_zun_fylkir
					artifact_type = crown_slavic_fylkir
					artifact_type = crown_romuva_fylkir
					artifact_type = crown_aztec_fylkir
					artifact_type = scepter_bon_fylkir
					artifact_type = scepter_hellenic_fylkir
					artifact_type = crown_ainu_fylkir
					artifact_type = scepter_andamanese_fylkir
					artifact_type = seal_bai_fylkir
					artifact_type = necklace_bamar_fylkir
					artifact_type = scepter_batak_fylkir
					artifact_type = seal_chinese_fylkir
					artifact_type = spear_dayak_fylkir
					artifact_type = sword_dusun_fylkir
					artifact_type = crown_inca_fylkir
					artifact_type = crown_jurchen_fylkir
					artifact_type = crown_korean_fylkir
					artifact_type = crown_maian_fylkir
					artifact_type = scepter_melanesian_fylkir
					artifact_type = bow_miao_fylkir
					artifact_type = sword_minahasan_fylkir
					artifact_type = dagger_minangkabau_fylkir
					artifact_type = necklace_nivkh_fylkir
					artifact_type = sword_ryukyuan_fylkir
					artifact_type = necklace_sanamahi_fylkir
					artifact_type = scepter_sundanese_fylkir
					artifact_type = crown_tai_fylkir
					artifact_type = crown_taiwanese_fylkir
					artifact_type = sword_viet_fylkir
					artifact_type = seal_yi_fylkir
					artifact_type = scepter_zhuang_fylkir
				}
			}
			
			transfer_artifact = {
				from = ROOT
				to = event_target:artifact_heir
			}
		}
	}
}