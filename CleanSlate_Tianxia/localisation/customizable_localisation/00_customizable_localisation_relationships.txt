# RELATIONSHIPS
# GetRootRelation
# GetPrevRelation
# GetEventTarget1Relation
# GetEventTarget2Relation
# GetEventTarget3Relation
# GetEventTarget4Relation
# GetConcubineConsort
# GetSpouse
# GetRootRelation_Wife
# GetRootRelation_Husband
# GetPrevRelation_Wife
# GetPrevRelation_Husband
# GetEventTarget1Relation_Wife
# GetEventTarget1Relation_Husband
# GetEventTarget2Relation_Wife
# GetEventTarget2Relation_Husband
# GetEventTarget3Relation_Wife
# GetEventTarget3Relation_Husband
# GetEventTarget4Relation_Wife
# GetEventTarget4Relation_Husband
# GetParent
# GetGrandParent
# GetChild
# GetGrandChild
# GetSibling
# GetAuntUncle
# GetNibling
# GetCousin
# GetSiblingInLaw
# GetParentInLaw
# GetKin
# GetLiege
# GetVassal
# GetCourtier
# GetRival
# GetFriend
# GetLover
# GetSisterBrother			Not necessarily related
# GetSeductressSeducer
# GetManWomanPreference		Gets man/woman depending on character's sexual preferences
# GetMenWomenPreference		gets men/women depending on character's sexual preferences
# GetRootRomanticWorry 		Stand-alone sentence for someone about to take initiative, like "What if this ruins our friendship?"
# GetRomanticObstacle 		More passive. Piece it into a sentence (lacks punctuation), for someone deciding whether to reciprocate or not, like "I am used to being alone".

### RELATIONSHIPS ###

# The relationship THIS has to ROOT
defined_text = {
	name = GetRootRelation
	use_first_valid = yes

	# War enemies and concubine/consort have highest priority
	text = {
		localisation_key = GetRelation_enemy
		trigger = { war_with = ROOT }
	}

	text = {
		localisation_key = GetConcubineConsortKey
		trigger = { is_consort = ROOT }
	}

	# Then spouses
	text = {
		localisation_key = GetSpouseRootKey
		trigger = { is_married = ROOT }
	}

	# Then some close relatives
	text = {
		localisation_key = GetParentKey
		trigger = { is_parent_of = ROOT }
	}

	text = {
		localisation_key = GetGrandParentKey
		trigger = { is_grandparent_of = ROOT }
	}

	text = {
		localisation_key = GetChildKey
		trigger = { is_child_of = ROOT }
	}

	text = {
		localisation_key = GetGrandChildKey
		trigger = { is_grandchild_of = ROOT }
	}

	text = {
		localisation_key = GetSiblingKey
		trigger = { sibling = ROOT }
	}

	# Followed by Rivals, Friends and Lovers
	text = {
		localisation_key = GetRivalKey
		trigger = { is_rival = ROOT }
	}

	text = {
		localisation_key = GetFriendKey
		trigger = { is_friend = ROOT }
	}

	text = {
		localisation_key = GetLoverKey
		trigger = { is_lover = ROOT }
	}

	# Then the other close relatives and other family ties
	text = {
		localisation_key = GetNiblingKey
		trigger = { is_nibling_of = ROOT }
	}

	text = {
		localisation_key = GetAuntUncleKey
		trigger = { is_aunt_uncle_of = ROOT }
	}

	text = {
		localisation_key = GetCousinKey
		trigger = { is_cousin_of = ROOT }
	}

	text = {
		localisation_key = GetSiblingInLawKey
		trigger = { sibling_in_law_of_root_trigger = yes }
	}

	text = {
		localisation_key = GetParentInLawKey
		trigger = { relative_in_law_of_root_trigger = yes }
	}

	text = {
		localisation_key = GetKinKey

		trigger = {
			dynasty = ROOT
			is_lowborn = no
		}
	}

	# And then some generic relations
	text = {
		localisation_key = GetLiegeKey
		trigger = { is_liege_of = ROOT }
	}

	text = {
		localisation_key = GetVassalKey

		trigger = {
			vassal_of = ROOT
			is_ruler = yes
		}
	}

	text = {
		localisation_key = GetCourtierKey

		trigger = {
			vassal_of = ROOT
			is_ruler = no
		}
	}

	text = {
		localisation_key = GetRelation_fellow_member

		trigger = {
			same_society_as = ROOT
		}
	}

	text = {
		localisation_key = GetRelation_sway_target

		trigger = {
			ROOT = {
				persistent_event_target:sway_target = {
					character = PREVPREV
				}
			}
		}
	}

	text = {
		localisation_key = GetRelation_antagonist

		trigger = {
			OR = {
				ROOT = {
					persistent_event_target:antagonize_target = {
						character = PREVPREV
					}
				}

				persistent_event_target:antagonize_target = {
					character = ROOT
				}
			}
		}
	}

	fallback_text = {
		localisation_key = String_root_relation_fallback
	}
}

# The relationship THIS has to PREV, not for event localisation, but useful elsewhere, such as tooltips and logging
defined_text = {
	name = GetPrevRelation
	use_first_valid = yes

	# War enemies and concubine/consort have highest priority
	text = {
		localisation_key = GetRelation_enemy
		trigger = { war_with = PREV }
	}

	text = {
		localisation_key = GetConcubineConsortKey
		trigger = { is_consort = PREV }
	}

	# Then spouses
	text = {
		localisation_key = GetSpouseKey
		trigger = { is_married = PREV }
	}

	# Then some close relatives
	text = {
		localisation_key = GetParentKey
		trigger = { is_parent_of = PREV }
	}

	text = {
		localisation_key = GetGrandParentKey
		trigger = { is_grandparent_of = PREV }
	}

	text = {
		localisation_key = GetChildKey
		trigger = { is_child_of = PREV }
	}

	text = {
		localisation_key = GetGrandChildKey
		trigger = { is_grandchild_of = PREV }
	}

	text = {
		localisation_key = GetSiblingKey
		trigger = { sibling = PREV }
	}

	# Followed by Rivals, Friends and Lovers
	text = {
		localisation_key = GetRivalKey
		trigger = { is_rival = PREV }
	}

	text = {
		localisation_key = GetFriendKey
		trigger = { is_friend = PREV }
	}

	text = {
		localisation_key = GetLoverKey
		trigger = { is_lover = PREV }
	}

	# Then the other close relatives and other family ties
	text = {
		localisation_key = GetNiblingKey
		trigger = { is_nibling_of = PREV }
	}

	text = {
		localisation_key = GetAuntUncleKey
		trigger = { is_aunt_uncle_of = PREV }
	}

	text = {
		localisation_key = GetCousinKey
		trigger = { is_cousin_of = PREV }
	}

	text = {
		localisation_key = GetSiblingInLawKey
		trigger = { sibling_in_law_of_prev_trigger = yes }
	}

	text = {
		localisation_key = GetParentInLawKey
		trigger = { relative_in_law_of_prev_trigger = yes }
	}

	text = {
		localisation_key = GetKinKey

		trigger = {
			dynasty = PREV
			is_lowborn = no
		}
	}

	# And then some generic relations
	text = {
		localisation_key = GetLiegeKey
		trigger = { is_liege_of = PREV }
	}

	text = {
		localisation_key = GetVassalKey

		trigger = {
			vassal_of = PREV
			is_ruler = yes
		}
	}

	text = {
		localisation_key = GetCourtierKey

		trigger = {
			vassal_of = PREV
			is_ruler = no
		}
	}

	text = {
		localisation_key = GetRelation_fellow_member
		trigger = { same_society_as = PREV }
	}

	text = {
		localisation_key = GetRelation_sway_target

		trigger = {
			PREV = {
				persistent_event_target:sway_target = {
					character = PREVPREV
				}
			}
		}
	}

	text = {
		localisation_key = GetRelation_antagonist

		trigger = {
			OR = {
				PREV = {
					persistent_event_target:antagonize_target = {
						character = PREVPREV
					}
				}

				persistent_event_target:antagonize_target = {
					character = PREV
				}
			}
		}
	}

	fallback_text = {
		localisation_key = String_root_relation_fallback
	}
}

# The relationship THIS has to event_target_1 [target_courtier.GetEventTarget1Relation]
defined_text = {
	name = GetEventTarget1Relation
	use_first_valid = yes

	# War enemies and concubine/consort have highest priority
	text = {
		localisation_key = GetRelation_enemy
		trigger = { war_with = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetConcubineConsortKey
		trigger = { is_consort = event_target:event_target_1 }
	}

	# Then spouses
	text = {
		localisation_key = GetSpouseEventTarget1Key
		trigger = { is_married = event_target:event_target_1 }
	}

	# Then some close relatives
	text = {
		localisation_key = GetParentKey
		trigger = { is_parent_of = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetGrandParentKey
		trigger = { is_grandparent_of = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetChildKey
		trigger = { is_child_of = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetGrandChildKey
		trigger = { is_grandchild_of = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetSiblingKey
		trigger = { sibling = event_target:event_target_1 }
	}

	# Followed by Rivals, Friends and Lovers
	text = {
		localisation_key = GetRivalKey
		trigger = { is_rival = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetFriendKey
		trigger = { is_friend = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetLoverKey
		trigger = { is_lover = event_target:event_target_1 }
	}

	# Then the other close relatives and other family ties
	text = {
		localisation_key = GetNiblingKey
		trigger = { is_nibling_of = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetAuntUncleKey
		trigger = { is_aunt_uncle_of = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetCousinKey
		trigger = { is_cousin_of = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetSiblingInLawKey
		trigger = { sibling_in_law_of_event_target_1_trigger = yes }
	}

	text = {
		localisation_key = GetParentInLawKey
		trigger = { relative_in_law_of_event_target_1_trigger = yes }
	}

	text = {
		localisation_key = GetKinKey

		trigger = {
			dynasty = event_target:event_target_1
			is_lowborn = no
		}
	}

	# And then some generic relations
	text = {
		localisation_key = GetLiegeKey
		trigger = { is_liege_of = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetVassalKey

		trigger = {
			vassal_of = event_target:event_target_1
			is_ruler = yes
		}
	}

	text = {
		localisation_key = GetCourtierKey

		trigger = {
			vassal_of = event_target:event_target_1
			is_ruler = no
		}
	}

	text = {
		localisation_key = GetRelation_fellow_member
		trigger = { same_society_as = event_target:event_target_1 }
	}

	text = {
		localisation_key = GetRelation_sway_target

		trigger = {
			event_target:event_target_1 = {
				persistent_event_target:sway_target = {
					character = PREVPREV
				}
			}
		}
	}

	text = {
		localisation_key = GetRelation_antagonist

		trigger = {
			OR = {
				event_target:event_target_1 = {
					persistent_event_target:antagonize_target = {
						character = PREVPREV
					}
				}

				persistent_event_target:antagonize_target = {
					character = event_target:event_target_1
				}
			}
		}
	}

	fallback_text = {
		localisation_key = String_root_relation_fallback
	}
}

# The relationship THIS has to event_target_2
defined_text = {
	name = GetEventTarget2Relation
	use_first_valid = yes

	# War enemies and concubine/consort have highest priority
	text = {
		localisation_key = GetRelation_enemy
		trigger = { war_with = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetConcubineConsortKey
		trigger = { is_consort = event_target:event_target_2 }
	}

	# Then spouses
	text = {
		localisation_key = GetSpouseEventTarget2Key
		trigger = { is_married = event_target:event_target_2 }
	}

	# Then some close relatives
	text = {
		localisation_key = GetParentKey
		trigger = { is_parent_of = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetGrandParentKey
		trigger = { is_grandparent_of = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetChildKey
		trigger = { is_child_of = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetGrandChildKey
		trigger = { is_grandchild_of = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetSiblingKey
		trigger = { sibling = event_target:event_target_2 }
	}

	# Followed by Rivals, Friends and Lovers
	text = {
		localisation_key = GetRivalKey
		trigger = { is_rival = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetFriendKey
		trigger = { is_friend = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetLoverKey
		trigger = { is_lover = event_target:event_target_2 }
	}

	# Then the other close relatives and other family ties
	text = {
		localisation_key = GetNiblingKey
		trigger = { is_nibling_of = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetAuntUncleKey
		trigger = { is_aunt_uncle_of = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetCousinKey
		trigger = { is_cousin_of = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetSiblingInLawKey
		trigger = { sibling_in_law_of_event_target_2_trigger = yes }
	}

	text = {
		localisation_key = GetParentInLawKey
		trigger = { relative_in_law_of_event_target_2_trigger = yes }
	}

	text = {
		localisation_key = GetKinKey

		trigger = {
			dynasty = event_target:event_target_2
			is_lowborn = no
		}
	}

	# And then some generic relations
	text = {
		localisation_key = GetLiegeKey
		trigger = { is_liege_of = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetVassalKey

		trigger = {
			vassal_of = event_target:event_target_2
			is_ruler = yes
		}
	}

	text = {
		localisation_key = GetCourtierKey

		trigger = {
			vassal_of = event_target:event_target_2
			is_ruler = no
		}
	}

	text = {
		localisation_key = GetRelation_fellow_member
		trigger = { same_society_as = event_target:event_target_2 }
	}

	text = {
		localisation_key = GetRelation_sway_target

		trigger = {
			event_target:event_target_2 = {
				persistent_event_target:sway_target = {
					character = PREVPREV
				}
			}
		}
	}

	text = {
		localisation_key = GetRelation_antagonist

		trigger = {
			OR = {
				event_target:event_target_2 = {
					persistent_event_target:antagonize_target = {
						character = PREVPREV
					}
				}

				persistent_event_target:antagonize_target = {
					character = event_target:event_target_2
				}
			}
		}
	}

	fallback_text = {
		localisation_key = String_root_relation_fallback
	}
}

# The relationship THIS has to event_target_3
defined_text = {
	name = GetEventTarget3Relation
	use_first_valid = yes

	# War enemies and concubine/consort have highest priority
	text = {
		localisation_key = GetRelation_enemy
		trigger = { war_with = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetConcubineConsortKey
		trigger = { is_consort = event_target:event_target_3 }
	}

	# Then spouses
	text = {
		localisation_key = GetSpouseEventTarget3Key
		trigger = { is_married = event_target:event_target_3 }
	}

	# Then some close relatives
	text = {
		localisation_key = GetParentKey
		trigger = { is_parent_of = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetGrandParentKey
		trigger = { is_grandparent_of = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetChildKey
		trigger = { is_child_of = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetGrandChildKey
		trigger = { is_grandchild_of = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetSiblingKey
		trigger = { sibling = event_target:event_target_3 }
	}

	# Followed by Rivals, Friends and Lovers
	text = {
		localisation_key = GetRivalKey
		trigger = { is_rival = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetFriendKey
		trigger = { is_friend = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetLoverKey
		trigger = { is_lover = event_target:event_target_3 }
	}

	# Then the other close relatives and other family ties
	text = {
		localisation_key = GetNiblingKey
		trigger = { is_nibling_of = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetAuntUncleKey
		trigger = { is_aunt_uncle_of = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetCousinKey
		trigger = { is_cousin_of = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetSiblingInLawKey
		trigger = { sibling_in_law_of_event_target_3_trigger = yes }
	}

	text = {
		localisation_key = GetParentInLawKey
		trigger = { relative_in_law_of_event_target_3_trigger = yes }
	}

	text = {
		localisation_key = GetKinKey

		trigger = {
			dynasty = event_target:event_target_3
			is_lowborn = no
		}
	}

	# And then some generic relations
	text = {
		localisation_key = GetLiegeKey
		trigger = { is_liege_of = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetVassalKey

		trigger = {
			vassal_of = event_target:event_target_3
			is_ruler = yes
		}
	}

	text = {
		localisation_key = GetCourtierKey

		trigger = {
			vassal_of = event_target:event_target_3
			is_ruler = no
		}
	}

	text = {
		localisation_key = GetRelation_fellow_member
		trigger = { same_society_as = event_target:event_target_3 }
	}

	text = {
		localisation_key = GetRelation_sway_target

		trigger = {
			event_target:event_target_3 = {
				persistent_event_target:sway_target = {
					character = PREVPREV
				}
			}
		}
	}

	text = {
		localisation_key = GetRelation_antagonist

		trigger = {
			OR = {
				event_target:event_target_3 = {
					persistent_event_target:antagonize_target = {
						character = PREVPREV
					}
				}

				persistent_event_target:antagonize_target = {
					character = event_target:event_target_3
				}
			}
		}
	}

	fallback_text = {
		localisation_key = String_root_relation_fallback
	}
}

# The relationship THIS has to event_target_4
defined_text = {
	name = GetEventTarget4Relation
	use_first_valid = yes

	# War enemies and concubine/consort have highest priority
	text = {
		localisation_key = GetRelation_enemy
		trigger = { war_with = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetConcubineConsortKey
		trigger = { is_consort = event_target:event_target_4 }
	}

	# Then spouses
	text = {
		localisation_key = GetSpouseEventTarget4Key
		trigger = { is_married = event_target:event_target_4 }
	}

	# Then some close relatives
	text = {
		localisation_key = GetParentKey
		trigger = { is_parent_of = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetGrandParentKey
		trigger = { is_grandparent_of = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetChildKey
		trigger = { is_child_of = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetGrandChildKey
		trigger = { is_grandchild_of = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetSiblingKey
		trigger = { sibling = event_target:event_target_4 }
	}

	# Followed by Rivals, Friends and Lovers
	text = {
		localisation_key = GetRivalKey
		trigger = { is_rival = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetFriendKey
		trigger = { is_friend = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetLoverKey
		trigger = { is_lover = event_target:event_target_4 }
	}

	# Then the other close relatives and other family ties
	text = {
		localisation_key = GetNiblingKey
		trigger = { is_nibling_of = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetAuntUncleKey
		trigger = { is_aunt_uncle_of = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetCousinKey
		trigger = { is_cousin_of = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetSiblingInLawKey
		trigger = { sibling_in_law_of_event_target_4_trigger = yes }
	}

	text = {
		localisation_key = GetParentInLawKey
		trigger = { relative_in_law_of_event_target_4_trigger = yes }
	}

	text = {
		localisation_key = GetKinKey

		trigger = {
			dynasty = event_target:event_target_4
			is_lowborn = no
		}
	}

	# And then some generic relations
	text = {
		localisation_key = GetLiegeKey
		trigger = { is_liege_of = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetVassalKey

		trigger = {
			vassal_of = event_target:event_target_4
			is_ruler = yes
		}
	}

	text = {
		localisation_key = GetCourtierKey

		trigger = {
			vassal_of = event_target:event_target_4
			is_ruler = no
		}
	}

	text = {
		localisation_key = GetRelation_fellow_member
		trigger = { same_society_as = event_target:event_target_4 }
	}

	text = {
		localisation_key = GetRelation_sway_target

		trigger = {
			event_target:event_target_4 = {
				persistent_event_target:sway_target = {
					character = PREVPREV
				}
			}
		}
	}

	text = {
		localisation_key = GetRelation_antagonist

		trigger = {
			OR = {
				event_target:event_target_4 = {
					persistent_event_target:antagonize_target = {
						character = PREVPREV
					}
				}

				persistent_event_target:antagonize_target = {
					character = event_target:event_target_4
				}
			}
		}
	}

	fallback_text = {
		localisation_key = String_root_relation_fallback
	}
}

defined_text = {
	name = GetConcubineConsort
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Concubine
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Consort
	}
}

defined_text = {
	name = GetSpouseRoot
	use_first_valid = yes

	text = {
		localisation_key = GetSpouse_ParentKey
		trigger = { is_parent_of = ROOT }
	}
	text = {
		localisation_key = GetSpouse_SiblingKey
		trigger = { sibling = ROOT }
	}
	text = {
		localisation_key = GetSpouse_ChildKey
		trigger = { is_child_of = ROOT }
	}
	text = {
		localisation_key = GetSpouseKey
	}
}

defined_text = {
	name = GetSpouseEventTarget1
	use_first_valid = yes

	text = {
		localisation_key = GetSpouse_ParentKey
		trigger = { is_parent_of = event_target:event_target_1 }
	}
	text = {
		localisation_key = GetSpouse_SiblingKey
		trigger = { sibling = event_target:event_target_1 }
	}
	text = {
		localisation_key = GetSpouse_ChildKey
		trigger = { is_child_of = event_target:event_target_1 }
	}
	text = {
		localisation_key = GetSpouseKey
	}
}

defined_text = {
	name = GetSpouseEventTarget2
	use_first_valid = yes

	text = {
		localisation_key = GetSpouse_ParentKey
		trigger = { is_parent_of = event_target:event_target_2 }
	}
	text = {
		localisation_key = GetSpouse_SiblingKey
		trigger = { sibling = event_target:event_target_2 }
	}
	text = {
		localisation_key = GetSpouse_ChildKey
		trigger = { is_child_of = event_target:event_target_2 }
	}
	text = {
		localisation_key = GetSpouseKey
	}
}

defined_text = {
	name = GetSpouseEventTarget3
	use_first_valid = yes

	text = {
		localisation_key = GetSpouse_ParentKey
		trigger = { is_parent_of = event_target:event_target_3 }
	}
	text = {
		localisation_key = GetSpouse_SiblingKey
		trigger = { sibling = event_target:event_target_3 }
	}
	text = {
		localisation_key = GetSpouse_ChildKey
		trigger = { is_child_of = event_target:event_target_3 }
	}
	text = {
		localisation_key = GetSpouseKey
	}
}

defined_text = {
	name = GetSpouseEventTarget4
	use_first_valid = yes

	text = {
		localisation_key = GetSpouse_ParentKey
		trigger = { is_parent_of = event_target:event_target_4 }
	}
	text = {
		localisation_key = GetSpouse_SiblingKey
		trigger = { sibling = event_target:event_target_4 }
	}
	text = {
		localisation_key = GetSpouse_ChildKey
		trigger = { is_child_of = event_target:event_target_4 }
	}
	text = {
		localisation_key = GetSpouseKey
	}
}

defined_text = {
	name = GetSpouseParent
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_MotherWife
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_FatherHusband
	}
}

defined_text = {
	name = GetSpouseSibling
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_SisterWife
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_BrotherHusband
	}
}

defined_text = {
	name = GetSpouseChild
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_DaughterWife
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_SonHusband
	}
}

defined_text = {
	name = GetSpouse
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Wife
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Husband
	}
}

defined_text = {
	name = GetParent
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Mother
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Father
	}
}

defined_text = {
	name = GetGrandParent
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Grandmother
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Grandfather
	}
}

defined_text = {
	name = GetChild
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Daughter
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Son
	}
}

defined_text = {
	name = GetGrandChild
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Granddaughter
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Grandson
	}
}

defined_text = {
	name = GetSibling
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Sister
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Brother
	}
}

defined_text = {
	name = GetAuntUncle
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Aunt
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Uncle
	}
}

defined_text = {
	name = GetNibling
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Niece
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Nephew
	}
}

defined_text = {
	name = GetCousin
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Cousin_Female
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Cousin_Male
	}
}

defined_text = {
	name = GetSiblingInLaw
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_SisterInLaw
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_BrotherInLaw
	}
}

defined_text = {
	name = GetParentInLaw
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_MotherInLaw
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_FatherInLaw
	}
}

defined_text = {
	name = GetKin
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Kinswoman
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Kinsman
	}
}

defined_text = {
	name = GetLiege
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Liege_Female
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Liege_Male
	}
}

defined_text = {
	name = GetVassal
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Vassal_Female
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Vassal_Male
	}
}

defined_text = {
	name = GetCourtier
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Courtier_Female
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Courtier_Male
	}
}

defined_text = {
	name = GetRival
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Rival_Female
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Rival_Male
	}
}

defined_text = {
	name = GetFriend
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Friend_Female
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Friend_Male
	}
}

defined_text = {
	name = GetLover
	use_first_valid = yes

	text = {
		localisation_key = GetRelation_Lover_Female
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = GetRelation_Lover_Male
	}
}

### Sister or Brother (not necessarily related)
defined_text = {
	name = GetSisterBrother
	use_first_valid = yes

	text = {
		localisation_key = String_sister
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = String_brother
	}
}

defined_text = {
	name = GetSisterBrotherCap
	use_first_valid = yes

	text = {
		localisation_key = String_Sister
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = String_Brother
	}
}

defined_text = {
	name = GetDaughterSon
	use_first_valid = yes

	text = {
		localisation_key = String_daughter
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = String_son
	}
}

### Seductress or Seducer
defined_text = {
	name = GetSeductressSeducer
	use_first_valid = yes

	text = {
		localisation_key = String_seductress
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = String_seducer
	}
}

### Seductress or Seducer
defined_text = {
	name = GetSeductressSeducerCap
	use_first_valid = yes

	text = {
		localisation_key = String_Seductress
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = String_Seducer
	}
}

### Madwoman or Madman
defined_text = {
	name = GetMadwomanMadman
	use_first_valid = yes

	text = {
		localisation_key = String_madwoman
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = String_madman
	}
}

### Madwoman or Madman CAP
defined_text = {
	name = GetMadwomanMadmanCap
	use_first_valid = yes

	text = {
		localisation_key = String_Madwoman
		trigger = { is_female = yes }
	}
	text = {
		localisation_key = String_Madman
	}
}

defined_text = {
	name = GetManWomanPreference
	use_first_valid = yes

	text = {
		localisation_key = String_man
		trigger = { prefers_men_trigger = yes }
	}
	text = {
		localisation_key = String_woman
	}
}

defined_text = {
	name = GetMenWomenPreference
	use_first_valid = yes

	text = {
		localisation_key = String_men
		trigger = { prefers_men_trigger = yes }
	}
	text = {
		localisation_key = String_women
	}
}